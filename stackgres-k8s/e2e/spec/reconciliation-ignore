#!/bin/sh

e2e_test_install() {
  NODE_LABEL_KEY=$(ramdom_string)
  NODE_LABEL_VALUE=$(ramdom_string)

  kubectl create namespace "$CLUSTER_NAMESPACE"

  cat <<EOF | kubectl apply -f -
apiVersion: stackgres.io/v1
kind: SGInstanceProfile
metadata:
  name: size-xs
  namespace: $CLUSTER_NAMESPACE
spec:
  cpu: '500m'
  memory: '512Mi'
EOF

  RECONCILIATION_IGNORE_ANNOTATION="stackgres.io/reconciliation-pause"
}


e2e_test() {
  run_test "A stackgres cluster with ignore label should not be created" ignore_sgcluster_create

  run_test "A stackgres cluster with ignore label should not be patched" ignore_sgcluster_patch

  run_test "A stackgres cluster without ignore label should be patched" resume_sgcluster_reconciliation

  run_test "A distributed logs cluster with ignore label should not be created" ignore_sgdistributedlogs_create

  run_test "A distributed logs cluster with ignore label should not be patched" ignore_sgdistributedlogs_patch
  
  run_test "A distributed logs cluster without ignore label should be patched" resume_sgdistributedlogs_reconciliation
  
}

ignore_sgcluster_create(){
    cat << EOF | kubectl apply -f -
apiVersion: stackgres.io/v1
kind: SGCluster
metadata:
  name: $CLUSTER_NAME
  namespace: $CLUSTER_NAMESPACE
  annotations:
    $RECONCILIATION_IGNORE_ANNOTATION: "true"
spec:
  instances: 1
  postgresVersion: 'latest'
  pods:
    persistentVolume:
      size: '128Mi'
    scheduling:
      nodeSelector:
        $NODE_LABEL_KEY: $NODE_LABEL_VALUE"
  sgInstanceProfile: 'size-xs'
  nonProductionOptions:
    disableClusterPodAntiAffinity: true  
EOF

  if wait_until -t "15" has_cluster_generated_resources
  then
    echo "FAIL. Cluster where created"
    return 1
  else
    echo "SUCCESS. Cluster resources wheren't created"
  fi

}

ignore_sgcluster_patch(){
  kubectl annotate sgcluster "$CLUSTER_NAME" -n "$CLUSTER_NAMESPACE" "$RECONCILIATION_IGNORE_ANNOTATION-"

  wait_until has_cluster_generated_resources

  kubectl annotate sgcluster "$CLUSTER_NAME" -n "$CLUSTER_NAMESPACE" "$RECONCILIATION_IGNORE_ANNOTATION=true"

  patch_sgcluster_instances "2"

  if wait_until -t "15" eval '[ $(get_cluster_replicas) = 2 ]'
  then
    echo "FAIL. SGCluster is not being ignored"
    return 1
  else
    echo "Sucess. SGCluster is being ignored"
  fi
  
}

resume_sgcluster_reconciliation(){
  kubectl annotate sgcluster "$CLUSTER_NAME" -n "$CLUSTER_NAMESPACE" "$RECONCILIATION_IGNORE_ANNOTATION"-

  if wait_until -t "15" eval '[ $(get_cluster_replicas) = 2 ]'
  then
    echo "SUCCESS. SGCluster is not being ignored"    
  else
    echo "FAIL. SGCluster is being ignored"
    return 1
  fi
}

ignore_sgdistributedlogs_create(){
  cat <<EOF | kubectl apply -f -
apiVersion: stackgres.io/v1
kind: SGDistributedLogs
metadata:
  name: $CLUSTER_NAME-logs
  namespace: $CLUSTER_NAMESPACE
  annotations:
    $RECONCILIATION_IGNORE_ANNOTATION: "true"
spec:
  persistentVolume:
    size: '128Mi'
  nonProductionOptions:
    disableClusterPodAntiAffinity: true
EOF

  if wait_until -t "15" has_logs_generated_resources
  then
    echo "FAIL. Distributed logs cluster where created"
    return 1
  else
    echo "SUCCESS. Distributed logs cluster resources wheren't created"
  fi
}

ignore_sgdistributedlogs_patch(){
  
  kubectl annotate sgdistributedlogs "$CLUSTER_NAME-logs" -n "$CLUSTER_NAMESPACE" "$RECONCILIATION_IGNORE_ANNOTATION=false" --overwrite

  wait_until has_logs_generated_resources

  kubectl annotate sgdistributedlogs "$CLUSTER_NAME-logs" -n "$CLUSTER_NAMESPACE" "$RECONCILIATION_IGNORE_ANNOTATION=true"  --overwrite

  kubectl patch sts "$CLUSTER_NAME-logs" -n "$CLUSTER_NAMESPACE" --type='json' \
    -p='[{"op": "replace", "path": "/spec/replicas", "value": 2}]'

  if wait_until -t "15" eval '[ $(get_sgdistributedlogs_replicas) = 1 ]'
  then
    echo "FAIL. Distributed logs is not being ignored"
    return 1
  else
    echo "Sucess. Distributed logs is being ignored"
  fi
}

resume_sgdistributedlogs_reconciliation(){
  kubectl annotate sgdistributedlogs "$CLUSTER_NAME-logs" -n "$CLUSTER_NAMESPACE" "$RECONCILIATION_IGNORE_ANNOTATION=false" --overwrite

  if wait_until -t "15" eval '[ $(get_sgdistributedlogs_replicas) = 1 ]'
  then
    echo "SUCCESS. Distributed logs is not being ignored"    
  else
    echo "FAIL. Distributed logs is being ignored"
    return 1
  fi
}

has_logs_generated_resources(){
  kubectl get sts -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME-logs"
}

get_cluster_replicas() {
  kubectl get sts -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o jsonpath='{.spec.replicas}'
}

get_sgdistributedlogs_replicas() {
  kubectl get sts -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME-logs" -o jsonpath='{.spec.replicas}'
}

patch_sgcluster_instances(){
  local DESIRED_INSTANCES="$1"

  SG_INSTANCES=$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o jsonpath='{.spec.instances}')

  echo "Current SGCluster instances $SG_INSTANCES, patching to $DESIRED_INSTANCES"

  while [ ! "$SG_INSTANCES" = 2 ]
  do
    kubectl patch sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" --type='json' \
      -p='[{"op": "replace", "path": "/spec/instances", "value": '"$DESIRED_INSTANCES"'}]'
    
    sleep 10
    SG_INSTANCES=$(kubectl get sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o jsonpath='{.spec.instances}')
    if [ ! "$SG_INSTANCES" = 2 ]
    then
      echo "Patch not applied... retrying"
      sleep 1
    fi
  done

}