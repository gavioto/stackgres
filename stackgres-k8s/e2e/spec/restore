#!/bin/sh

e2e_test_install() {

  export MINIO_NAME="$CLUSTER_NAME-backup-minio"
  export BUCKET_NAME="$CLUSTER_NAME-backup"
  export MINIO_NAMESPACE="$CLUSTER_NAMESPACE-backup"
  install_minio

  SPEC_VALUES_FILE="$SPEC_FILE.backup.values.yaml"

  local ENDPOINT="http://restore-backup-minio.$CLUSTER_NAMESPACE-backup.svc.cluster.local:9000"
  create_or_replace_cluster "$CLUSTER_NAME-backup" "$CLUSTER_NAMESPACE-backup" 1 \
    --set-string "configurations.backupconfig.storage.s3Compatible.endpoint=$ENDPOINT"

  wait_pods_running "$CLUSTER_NAMESPACE-backup" 2
  wait_cluster "$CLUSTER_NAME-backup" "$CLUSTER_NAMESPACE-backup"

  create_mock_data

  BACKUP_NAME="$CLUSTER_NAME-backup-0-$(shuf -i 0-65535 -n 1)"

  cat << EOF | kubectl create -f -
apiVersion: stackgres.io/v1
kind: SGBackup
metadata:
  namespace: "$CLUSTER_NAMESPACE-backup"
  name: "$BACKUP_NAME"
spec:
  sgCluster: "$CLUSTER_NAME-backup"
  managedLifecycle: false
EOF
  
  wait_until is_backup_phase "Completed"

  BACKUP_UID="$(kubectl get sgbackups.stackgres.io -n "$CLUSTER_NAMESPACE-backup" $BACKUP_NAME -o=jsonpath='{.metadata.uid}')"

  BACKUP_PIRT_DATE="$(date +%Y-%m-%dT%H:%M:%SZ --utc)"
  sleep 2
  create_more_mock_data

  SPEC_VALUES_FILE="$SPEC_FILE.values.yaml"

  kubectl create namespace "$CLUSTER_NAMESPACE" || true

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2 --set cluster.initialData.restore.fromBackup.uid="$BACKUP_UID"

  wait_pods_running "$CLUSTER_NAMESPACE" 2
  wait_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"
}

is_backup_phase() {
  [ "$(kubectl get sgbackup -n "$CLUSTER_NAMESPACE-backup" "$BACKUP_NAME" -o=jsonpath='{.status.process.status}')" = "$1" ]
}

e2e_test_uninstall() {
  helm_cleanup_chart "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" || true
  helm_cleanup_chart "$CLUSTER_NAME-backup" "$CLUSTER_NAMESPACE" || true

  k8s_async_cleanup_namespace "$CLUSTER_NAMESPACE" || true
  k8s_async_cleanup_namespace "$CLUSTER_NAMESPACE-backup" || true
}

e2e_test() {
  run_test "Check that data was restored on primary node" check_init_data_after_restore
  run_test "Check that data was restored on replica node" check_replica_data_after_restore
  run_test "Check that replication is still working aster restore" check_replication_after_restore
  run_test "Check that backup is compatible with cluster" check_backup_pg_version
  run_test "Check that restore default values" check_restore_default_values
  run_test "Check that restore using PITR" check_restore_using_pitr
}

create_mock_data() {
  run_query -p 5432 -i 0 -n "$CLUSTER_NAMESPACE-backup" -c "$CLUSTER_NAME-backup" -q "CREATE DATABASE test;"
  run_query -p 5432 -i 0 -n "$CLUSTER_NAMESPACE-backup" -c "$CLUSTER_NAME-backup" -d "test" -q "CREATE TABLE fibonacci(num integer);"
  run_query -p 5432 -i 0 -n "$CLUSTER_NAMESPACE-backup" -c "$CLUSTER_NAME-backup" -d "test" -q "INSERT INTO fibonacci(num) VALUES (1);"
  run_query -p 5432 -i 0 -n "$CLUSTER_NAMESPACE-backup" -c "$CLUSTER_NAME-backup" -d "test" -q "INSERT INTO fibonacci(num) VALUES (2);"
  run_query -p 5432 -i 0 -n "$CLUSTER_NAMESPACE-backup" -c "$CLUSTER_NAME-backup" -d "test" -q "INSERT INTO fibonacci(num) VALUES (3);"
}

create_more_mock_data() {
  run_query -p 5432 -i 0 -n "$CLUSTER_NAMESPACE-backup" -c "$CLUSTER_NAME-backup" -d "test" -q "INSERT INTO fibonacci(num) VALUES (5);"
  run_query -p 5432 -i 0 -n "$CLUSTER_NAMESPACE-backup" -c "$CLUSTER_NAME-backup" -d "test" -q "INSERT INTO fibonacci(num) VALUES (8);"
  run_query -p 5432 -i 0 -n "$CLUSTER_NAMESPACE-backup" -c "$CLUSTER_NAME-backup" -d "test" -q "INSERT INTO fibonacci(num) VALUES (13);"
  CURRENT_WAL_FILE="$(run_query -p 5432 -i 0 -n "$CLUSTER_NAMESPACE-backup" -c "$CLUSTER_NAME-backup" -d "test" \
    -q "SELECT r.file_name from pg_walfile_name_offset(pg_current_wal_lsn()) as r")"
  run_query -p 5432 -i 0 -n "$CLUSTER_NAMESPACE-backup" -c "$CLUSTER_NAME-backup" -d "test" -q "CHECKPOINT;"
  wait_until -t "$((E2E_TIMEOUT / 10))" eval '[ "$(run_query -p 5432 -i 0 -n "$CLUSTER_NAMESPACE-backup" -c "$CLUSTER_NAME-backup" -d "test" \
    -q "SELECT r.file_name from pg_walfile_name_offset(pg_switch_wal()) as r")" != "$CURRENT_WAL_FILE" ]'
  wait_until -t "$((E2E_TIMEOUT / 10))" timeout -s KILL "$((E2E_TIMEOUT / 20))" \
    kubectl exec -n "$CLUSTER_NAMESPACE-backup" "$CLUSTER_NAME-backup-0" -c patroni -- \
    exec-with-env backup -- wal-g wal-fetch "$CURRENT_WAL_FILE" "/tmp/$CURRENT_WAL_FILE"
}

check_init_data_after_restore() {
  if run_query -p 5432 -i 1 -h "$CLUSTER_NAME-primary" -c "$CLUSTER_NAME" -n "$CLUSTER_NAMESPACE" -d "test" -q " SELECT num FROM fibonacci ORDER BY num;" \
    | tr -d '\n' \
    | grep -q "^1235813$"
  then
    echo "SUCCESS: restore primary db restored successfully"
  else
    echo "FAIL: primary db not restored successfully"
    return 1
  fi

}

check_replica_data_after_restore() {
  if run_query -p 5432 -i 0 -h "$CLUSTER_NAME-replicas" -c "$CLUSTER_NAME" -n "$CLUSTER_NAMESPACE" -d "test" -q " SELECT num FROM fibonacci ORDER BY num;" \
    | tr -d '\n' \
    | grep -q "^1235813$"
  then
    echo "SUCCESS: restore replica db restored successfully"
  else
    echo "FAIL: replica db not restored successfully"
    return 1
  fi

}

check_replication_after_restore() {
  local PRIMARY_RESPONSE
  local REPLICA_RESPONSE

  run_query -p 5432 -i 1 -h "$CLUSTER_NAME-primary" -c "$CLUSTER_NAME" -n "$CLUSTER_NAMESPACE" -q "INSERT INTO fibonacci(num) VALUES (21);" -d test
  run_query -p 5432 -i 1 -h "$CLUSTER_NAME-primary" -c "$CLUSTER_NAME" -n "$CLUSTER_NAMESPACE" -q "INSERT INTO fibonacci(num) VALUES (34);" -d test
  run_query -p 5432 -i 1 -h "$CLUSTER_NAME-primary" -c "$CLUSTER_NAME" -n "$CLUSTER_NAMESPACE" -q "INSERT INTO fibonacci(num) VALUES (55);" -d test

  PRIMARY_RESPONSE="$(run_query -p 5432 -i 1 -h "$CLUSTER_NAME-primary" -c "$CLUSTER_NAME" -n "$CLUSTER_NAMESPACE" -d "test" -q "SELECT num FROM fibonacci ORDER BY num;" | tr -d '\n')"
  REPLICA_RESPONSE="$(run_query -p 5432 -i 0 -h "$CLUSTER_NAME-replicas" -c "$CLUSTER_NAME" -n "$CLUSTER_NAMESPACE" -d "test" -q "SELECT num FROM fibonacci ORDER BY num;" | tr -d '\n')"

  if [ "$PRIMARY_RESPONSE" = "1235813213455" ]
  then
    if [ "$PRIMARY_RESPONSE" = "$REPLICA_RESPONSE" ]
    then
      echo "SUCCESS: replication is working"
      return 0
    else
      echo "FAIL: replication is not working. The records don't match between primary and replica for the fibonacci table"
      return 1
    fi
  else
    echo "FAIL: inserts on the primary where not sucessful."
    return 1
  fi

}

check_backup_pg_version() {
  ALTERNATIVE_PG_VERSION="12.6"
  ALTERNATIVE_MAYOR_PG_VERSION="${ALTERNATIVE_PG_VERSION%.*}"

  cat << EOF | kubectl apply -f -
apiVersion: stackgres.io/v1
kind: SGPostgresConfig
metadata:
  name: pgconfig-alter
  namespace: $CLUSTER_NAMESPACE
spec:
  postgresVersion: '$ALTERNATIVE_MAYOR_PG_VERSION'
  postgresql.conf: {}
EOF

  cat << EOF > "$LOG_PATH/alter-restore-cluster.yaml"
apiVersion: stackgres.io/v1
kind: SGCluster
metadata:
  name: $CLUSTER_NAME-alter
  namespace: $CLUSTER_NAMESPACE
spec:
  instances: 1
  postgresVersion: '$ALTERNATIVE_PG_VERSION'
  pods:
    persistentVolume:
      size: '512Mi'
  configurations:
    sgPostgresConfig: pgconfig-alter
  initialData:
    restore:
      downloadDiskConcurrency: 1
      fromBackup:
        uid: $BACKUP_UID
EOF

  if ERROR_MESSAGE="$(kubectl apply -f "$LOG_PATH/alter-restore-cluster.yaml" 2>&1)"
  then
    echo "ERROR: It should not be able to install a cluster with postgres version that is different than the backup pg version"
    return 1
  else
    echo "SUCCESS: Cluster was not created"
  fi

  if echo "$ERROR_MESSAGE" | grep -q "Cannot restore from backup $BACKUP_UID"
  then
    echo "SUCCESS: Error message was the expected"
  else 
    echo "FAIL: Unexpected error message $ERROR_MESSAGE"
    return 1
  fi
}

check_restore_default_values(){

  kubectl delete sgcluster -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" 

  cat << EOF | kubectl apply -f -
apiVersion: stackgres.io/v1
kind: SGCluster
metadata:
  name: $CLUSTER_NAME
  namespace: $CLUSTER_NAMESPACE
spec:
  instances: 1
  postgresVersion: 'latest'
  pods:
    persistentVolume:
      size: '128Mi'
  initialData:
    restore:
      fromBackup:
        uid: $BACKUP_UID
EOF

  assert_default_value "downloadDiskConcurrency" "1"

}

assert_default_value(){
  local FIELD="$1"
  local EXPECTED_VALUE="$2"

  if ACTUAL_VALUE="$(kubectl get sgclusters.stackgres.io -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o=jsonpath="{.spec.initialData.restore.$FIELD}")"
  then
    if [ "$ACTUAL_VALUE" = "$EXPECTED_VALUE" ]
    then
      echo "SUCCESS. Default value for field $FIELD is the expected"
    else
      echo "FAIL. Default value is not the expected. Expected: $EXPECTED_VALUE. Actual: $ACTUAL_VALUE"
      return 1
    fi
  else
    echo "FAIL. Default value for field $FIELD not found"
    return 1
  fi
    
}

check_restore_using_pitr() {
  remove_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 1 --set-string cluster.initialData.restore.fromBackup.uid="$BACKUP_UID" \
    --set-string cluster.initialData.restore.fromBackup.pointInTimeRecovery.restoreToTimestamp="$BACKUP_PIRT_DATE"

  wait_pods_running "$CLUSTER_NAMESPACE" 1
  wait_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"

  if run_query -p 5432 -i 0 -c "$CLUSTER_NAME" -n "$CLUSTER_NAMESPACE" -d "test" -q " SELECT num FROM fibonacci ORDER BY num;" \
    | tr -d '\n' \
    | grep -q "^123$"
  then
    echo "SUCCESS: restore replica db restored successfully using PITR"
  else
    echo "FAIL: replica db not restored successfully using PITR"
    return 1
  fi
}

