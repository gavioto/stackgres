#!/bin/sh

e2e_test_install() {
  NODE_LABEL_KEY=$(ramdom_string)
  NODE_LABEL_VALUE=$(ramdom_string)

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2 \
    --set "cluster.pods.scheduling.nodeSelector.$NODE_LABEL_KEY=$NODE_LABEL_VALUE" \
    --set cluster.postgresServices.primary.enabled="false" \
    --set cluster.postgresServices.replicas.enabled="false"
}

e2e_test() {
  run_test "Creating a cluster with services disabled" services_disabled

  run_test "Creating a cluster with services enabled with specific annotations" services_annotations

  run_test "Creating a cluster with services as node port" node_port_services

  run_test "Creating a cluster with services as load balancer" load_balancer_services
}

services_disabled(){
  if kubectl get service -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" > /dev/null 2>&1
  then
    echo "FAIL. Primary service was created"
    return 1
  else
    echo "SUCCESS. Primary service was not created"
  fi

  if kubectl get service -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-"primary" > /dev/null 2>&1
  then
    echo "FAIL. Primary service was created"
    return 1
  else
    echo "SUCCESS. Primary service was not created"
  fi

  if kubectl get service -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-"replicas" > /dev/null 2>&1
  then
    echo "FAIL. Replica service was created"
    return 1
  else
    echo "SUCCESS. Replica services was not created"
  fi

  remove_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"
}

services_annotations(){
  local PRIMARY_RANDOM_VALUE=$(ramdom_string)
  local REPLICA_RANDOM_VALUE=$(ramdom_string)

  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2 \
    --set "cluster.pods.scheduling.nodeSelector.$NODE_LABEL_KEY=$NODE_LABEL_VALUE" \
    --set cluster.postgresServices.primary.enabled="true" \
    --set cluster.postgresServices.replicas.enabled="true" \
    --set cluster.postgresServices.primary.annotations.primary-annotation="$PRIMARY_RANDOM_VALUE" \
    --set cluster.postgresServices.replicas.annotations.replica-annotation="$REPLICA_RANDOM_VALUE"

  SERVICE_ANNOTATION="primary-annotation"
  wait_until check_service_annotation "" "$PRIMARY_RANDOM_VALUE"

  SERVICE_ANNOTATION="replica-annotation"
  wait_until check_service_annotation "replicas" "$REPLICA_RANDOM_VALUE"

  remove_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"
}

node_port_services(){
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2 \
    --set "cluster.pods.scheduling.nodeSelector.$NODE_LABEL_KEY=$NODE_LABEL_VALUE" \
    --set cluster.postgresServices.primary.enabled="true" \
    --set cluster.postgresServices.replicas.enabled="true" \
    --set cluster.postgresServices.primary.type="NodePort" \
    --set cluster.postgresServices.replicas.type="NodePort"

  wait_until kubectl get service -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"
  wait_until kubectl get service -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-"primary"

  local PRIMARY_SERVICE_TYPE=$(kubectl get services -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o jsonpath='{.spec.type}')
  local OLD_PRIMARY_SERVICE_TYPE=$(kubectl get services -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-"primary" -o jsonpath='{.spec.type}')
  local REPLICA_SERVICE_TYPE=$(kubectl get services -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-"replicas" -o jsonpath='{.spec.type}')

  assert_string_equal "NodePort" "$PRIMARY_SERVICE_TYPE"
  assert_string_equal "ExternalName" "$OLD_PRIMARY_SERVICE_TYPE"
  assert_string_equal "NodePort" "$REPLICA_SERVICE_TYPE"

  remove_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"
}

load_balancer_services(){
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" 2 \
    --set "cluster.pods.scheduling.nodeSelector.$NODE_LABEL_KEY=$NODE_LABEL_VALUE" \
    --set cluster.postgresServices.primary.enabled="true" \
    --set cluster.postgresServices.replicas.enabled="true" \
    --set cluster.postgresServices.primary.type="LoadBalancer" \
    --set cluster.postgresServices.replicas.type="LoadBalancer"

  wait_until kubectl get service -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"
  wait_until kubectl get service -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-"primary"
  wait_until kubectl get service -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-"replicas"

  local PRIMARY_SERVICE_TYPE=$(kubectl get services -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME" -o jsonpath='{.spec.type}')
  local OLD_PRIMARY_SERVICE_TYPE=$(kubectl get services -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-"primary" -o jsonpath='{.spec.type}')
  local REPLICA_SERVICE_TYPE=$(kubectl get services -n "$CLUSTER_NAMESPACE" "$CLUSTER_NAME"-"replicas" -o jsonpath='{.spec.type}')

  assert_string_equal "LoadBalancer" "$PRIMARY_SERVICE_TYPE"
  assert_string_equal "ExternalName" "$OLD_PRIMARY_SERVICE_TYPE"
  assert_string_equal "LoadBalancer" "$REPLICA_SERVICE_TYPE"

  remove_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"
}