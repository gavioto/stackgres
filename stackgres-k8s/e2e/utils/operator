#!/bin/sh

. "$E2E_PATH/utils/helpers"

export IMAGE_TAG="${IMAGE_TAG:-development-jvm}"
export ADMINUI_IMAGE_TAG="${IMAGE_TAG%-jvm}"
export OPERATOR_PUBLIC_REGISTRY="docker.io"
export OPERATOR_PUBLIC_REGISTRY_PATH="/stackgres/"
export COMPONENT_PUBLIC_REGISTRY="docker.io"
export COMPONENT_PUBLIC_REGISTRY_PATH="/ongres/"
export OPERATOR_IMAGE_NAME="${OPERATOR_PUBLIC_REGISTRY}${OPERATOR_PUBLIC_REGISTRY_PATH}operator:$IMAGE_TAG"
export RESTAPI_IMAGE_NAME="${OPERATOR_PUBLIC_REGISTRY}${OPERATOR_PUBLIC_REGISTRY_PATH}restapi:$IMAGE_TAG"
export JOBS_IMAGE_NAME="${OPERATOR_PUBLIC_REGISTRY}${OPERATOR_PUBLIC_REGISTRY_PATH}jobs:$IMAGE_TAG"
export CLUSTER_CONTROLLER_IMAGE_NAME="${OPERATOR_PUBLIC_REGISTRY}${OPERATOR_PUBLIC_REGISTRY_PATH}cluster-controller:$IMAGE_TAG"
export DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME="${OPERATOR_PUBLIC_REGISTRY}${OPERATOR_PUBLIC_REGISTRY_PATH}distributedlogs-controller:$IMAGE_TAG"
export ADMINUI_IMAGE_NAME="${OPERATOR_PUBLIC_REGISTRY}${OPERATOR_PUBLIC_REGISTRY_PATH}admin-ui:$ADMINUI_IMAGE_TAG"
export EXTENSIONS_REPOSITORY_URL="${EXTENSIONS_REPOSITORY_URL:-https://extensions.stackgres.io/postgres/repository}"

export STACKGRES_PATH="${STACKGRES_PATH:-$E2E_PATH/..}"
export PROJECT_PATH="${PROJECT_PATH:-$STACKGRES_PATH/..}"
export STACKGRES_VERSION="$(grep '<artifactId>stackgres-parent</artifactId>' "$STACKGRES_PATH/src/pom.xml" -A 2 -B 2 \
  | grep -o '<version>\([^<]\+\)</version>' | tr '<>' '  ' | cut -d ' ' -f 3)"
export STACKGRES_IMAGE_BUILDER="${STACKGRES_IMAGE_BUILDER:-docker}"
export OPERATOR_CHART_PATH="${OPERATOR_CHART_PATH:-"$STACKGRES_PATH/install/helm/stackgres-operator/"}"
export CLUSTER_CHART_PATH="${CLUSTER_CHART_PATH:-"$STACKGRES_PATH/install/helm/stackgres-cluster/"}"
export UI_TESTS_RESOURCES_PATH="${UI_TESTS_RESOURCES_PATH:-"$STACKGRES_PATH/src/admin-ui"}"
export STACKGRES_HELM_PATH="${STACKGRES_PATH}/install/helm"
export STACKGRES_PACKAGES="${STACKGRES_HELM_PATH}/target/packages"
export STACKGRES_YAMLS="${STACKGRES_HELM_PATH}/target/templates"

export E2E_SKIP_SETUP="${E2E_SKIP_SETUP:-false}"
export E2E_OPERATOR_PULL_POLICY="${E2E_OPERATOR_PULL_POLICY:-Never}"
export E2E_BUILD_IMAGES="${E2E_BUILD_IMAGES:-true}"
export E2E_SKIP_OPERATOR_LOAD="${E2E_SKIP_OPERATOR_LOAD:-false}"
export E2E_WAIT_OPERATOR="${E2E_WAIT_OPERATOR:-true}"

generate_operator_namespace() {
  echo stackgres-$(printf '%x' "$(date +%s)")
}

export OPERATOR_NAMESPACE="${OPERATOR_NAMESPACE:-$(generate_operator_namespace)}"

setup_images() {
  if [ "$E2E_BUILD_IMAGES" = true ] \
    && (
      [ "$E2E_REUSE_OPERATOR_PODS" != true ] \
      || ! is_operator_installed
    )
  then
    build_components
    (
    echo build_operator_image
    echo build_restapi_image
    echo build_jobs_image
    echo build_cluster_controller_image
    echo build_distributedlogs_controller_image
    echo build_adminui_image
    echo build_helm_artifacts
    ) | xargs -n 1 -I % -P "$E2E_PARALLELISM" "$SHELL" $SHELL_XTRACE "$E2E_PATH/e2e" %
  fi
}

build_components() {
  (
  cd "$STACKGRES_PATH/src"
  ./mvnw -q clean package -DskipTests
  sh $SHELL_XTRACE api-web/src/main/swagger/build.sh
  )
}

build_operator_image() {
  (
  cd "$STACKGRES_PATH/src"
  sh $SHELL_XTRACE "operator/src/main/$STACKGRES_IMAGE_BUILDER/build-image-jvm.sh"
  )
}

build_restapi_image() {
  (
  cd "$STACKGRES_PATH/src"
  sh $SHELL_XTRACE "api-web/src/main/$STACKGRES_IMAGE_BUILDER/build-image-jvm.sh"
  )
}

build_jobs_image() {
  (
  cd "$STACKGRES_PATH/src"
  sh $SHELL_XTRACE "jobs/src/main/$STACKGRES_IMAGE_BUILDER/build-image-jvm.sh"
  )
}

build_cluster_controller_image() {
  (
  cd "$STACKGRES_PATH/src"
  sh $SHELL_XTRACE "cluster-controller/src/main/$STACKGRES_IMAGE_BUILDER/build-image-jvm.sh"
  )
}

build_distributedlogs_controller_image() {
  (
  cd "$STACKGRES_PATH/src"
  sh $SHELL_XTRACE "distributedlogs-controller/src/main/$STACKGRES_IMAGE_BUILDER/build-image-jvm.sh"
  )
}

build_adminui_image() {
  (
  cd "$STACKGRES_PATH/src"
  sh $SHELL_XTRACE admin-ui/npmw install
  sh $SHELL_XTRACE admin-ui/npmw run build
  sh $SHELL_XTRACE admin-ui/build.sh
  sh $SHELL_XTRACE "admin-ui/$STACKGRES_IMAGE_BUILDER/build.sh"
  )
}

build_helm_artifacts() {
  (
  cd "$STACKGRES_PATH/install/helm"
  sh $SHELL_XTRACE build-helm-packages.sh
  sh $SHELL_XTRACE build-helm-templates.sh
  )
}

create_operator_certificate() {
  kubectl delete csr --ignore-not-found 'stackgres-operator'
  rm -f \
    "$TARGET_PATH/csr.conf" \
    "$TARGET_PATH/server-key.pem" \
    "$TARGET_PATH/server-pub.pem" \
    "$TARGET_PATH/server.csr" \
    "$TARGET_PATH/server.crt"
  cat << EOF > "$TARGET_PATH/csr.conf"
[req]
req_extensions = v3_req
distinguished_name = req_distinguished_name
[req_distinguished_name]
[ v3_req ]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names
[alt_names]
DNS.1 = stackgres-operator
DNS.2 = stackgres-operator.$OPERATOR_NAMESPACE
DNS.3 = stackgres-operator.$OPERATOR_NAMESPACE.svc
DNS.4 = stackgres-operator.$OPERATOR_NAMESPACE.svc.cluster.local
EOF

  openssl req -new -nodes -text -keyout "$TARGET_PATH/server-key.pem" \
      -subj "/CN=stackgres-operator.$OPERATOR_NAMESPACE.svc" \
      -out "$TARGET_PATH/server.csr" \
      -config "$TARGET_PATH/csr.conf"
  openssl rsa -in "$TARGET_PATH/server-key.pem" -pubout -out "$TARGET_PATH/server-pub.pem"

  cat << EOF | kubectl create -f -
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: stackgres-operator
spec:
  request: "$(cat "$TARGET_PATH/server.csr" | base64 | tr -d '\n')"
  usages:
  - digital signature
  - key encipherment
  - server auth
EOF

  kubectl certificate approve 'stackgres-operator'
  kubectl get csr 'stackgres-operator' -o jsonpath='{.status.certificate}' | base64 -d > "$TARGET_PATH/server.crt"
}

setup_operator() {
  if [ "$E2E_SKIP_SETUP" = true ] \
    || ([ "$E2E_REUSE_OPERATOR_PODS" = true ] && is_operator_installed)
  then
    if is_operator_installed
    then
      OPERATOR_NAMESPACE="$(get_operator_namespace)"
      echo "Operator already installed in namespace $OPERATOR_NAMESPACE"
    fi
    if [ "$E2E_SKIP_SETUP" = true ]
    then
      echo "Skipping operator setup"
      return
    fi
  fi

  if ! is_operator_installed \
    || ([ "$E2E_USE_EXTERNAL_OPERATOR" != true ] \
      && [ "$E2E_REUSE_OPERATOR_PODS" != true ]) \
    || [ "$(get_operator_namespace)" != "$OPERATOR_NAMESPACE" ]
  then
    if [ "$E2E_USE_INTERMIDIATE_PRIVATE_REPO" != true \
        -a "$E2E_SKIP_OPERATOR_LOAD" != true ]
    then
      load_operator_k8s
    fi

    echo "Performing full cleanup"
    k8s_webhook_cleanup
    helm_cleanup
    k8s_async_cleanup
    echo "Full cleanup completed"

    if [ "$E2E_SKIP_OPERATOR_INSTALL" != true ]
    then
      install_operator
      store_operator_values
      if [ "$E2E_WAIT_OPERATOR" = true ]
      then
        wait_pods_running "$OPERATOR_NAMESPACE"
        wait_services_available "$OPERATOR_NAMESPACE" 1 "^stackgres-operator$"
        wait_services_available "$OPERATOR_NAMESPACE" 1 "^stackgres-restapi$"
      fi
    fi
  else
    echo "Performing cleanup skipping operator"
    helm_cleanup_but_operator
    k8s_async_cleanup_but_operator
    echo "Cleanup skipping operator completed"
  fi
}

is_operator_installed() {
  helm list -A | grep -q '^stackgres-operator[[:space:]]'
}

get_operator_namespace() {
  helm list -A | grep '^stackgres-operator[[:space:]]' \
    | sed 's/[[:space:]]\+/ /g' | cut -d ' ' -f 2
}

load_operator_k8s() {
  local IMAGE_NAME
  if [ "$E2E_FORCE_IMAGE_PULL" = "true" ]
  then
    if [ -n "$E2E_OPERATOR_REGISTRY" ]
    then
      echo "Loading operator images from $E2E_OPERATOR_REGISTRY$E2E_OPERATOR_REGISTRY_PATH"
      for IMAGE_NAME in \
        "$OPERATOR_IMAGE_NAME" \
        "$RESTAPI_IMAGE_NAME" \
        "$JOBS_IMAGE_NAME" \
        "$CLUSTER_CONTROLLER_IMAGE_NAME" \
        "$DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME" \
        "$ADMINUI_IMAGE_NAME"
      do
        echo "$IMAGE_NAME"
      done | xargs -n 1 -I % -P "$E2E_PARALLELISM" "$SHELL" $SHELL_XTRACE "$E2E_PATH/e2e" \
        pull_image_from "$E2E_OPERATOR_REGISTRY" "$E2E_OPERATOR_REGISTRY_PATH" "%"
      echo "All operator images loaded from $E2E_OPERATOR_REGISTRY$E2E_OPERATOR_REGISTRY_PATH"
    else
      echo "Loading operator images from ${OPERATOR_PUBLIC_REGISTRY}${OPERATOR_PUBLIC_REGISTRY_PATH}"
      for IMAGE_NAME in \
        "$OPERATOR_IMAGE_NAME" \
        "$RESTAPI_IMAGE_NAME" \
        "$JOBS_IMAGE_NAME" \
        "$CLUSTER_CONTROLLER_IMAGE_NAME" \
        "$DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME" \
        "$ADMINUI_IMAGE_NAME"
      do
        echo "$IMAGE_NAME"
      done | xargs -n 1 -I % -P "$E2E_PARALLELISM" "$SHELL" $SHELL_XTRACE "$E2E_PATH/e2e" \
        docker_pull "%"
      echo "All operator images loaded from ${OPERATOR_PUBLIC_REGISTRY}${OPERATOR_PUBLIC_REGISTRY_PATH}"
    fi
  fi
  if [ -n "$E2E_COMPONENTS_REGISTRY" ]
  then
    echo "Loading component images from ${E2E_COMPONENTS_REGISTRY}${E2E_COMPONENTS_REGISTRY_PATH}"
    load_component_images_from "$E2E_COMPONENTS_REGISTRY" "$E2E_COMPONENTS_REGISTRY_PATH"
    echo "All component images loaded from ${E2E_COMPONENTS_REGISTRY}${E2E_COMPONENTS_REGISTRY_PATH}"
  fi

  if [ -n "$1" ]
  then
    local ORIGINAL_OPERATOR_IMAGE_NAME="$OPERATOR_IMAGE_NAME"
    local ORIGINAL_RESTAPI_IMAGE_NAME="$RESTAPI_IMAGE_NAME"
    local ORIGINAL_JOBS_IMAGE_NAME="$JOBS_IMAGE_NAME"
    local ORIGINAL_CLUSTER_CONTROLLER_IMAGE_NAME="$CLUSTER_CONTROLLER_IMAGE_NAME"
    local ORIGINAL_DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME="$DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME"
    local ORIGINAL_ADMINUI_IMAGE_NAME="$ADMINUI_IMAGE_NAME"
    local IMAGE_TAG="$1"
    local ADMINUI_IMAGE_TAG="${IMAGE_TAG%-jvm}"
    local OPERATOR_IMAGE_NAME="stackgres/operator:$IMAGE_TAG"
    local RESTAPI_IMAGE_NAME="stackgres/restapi:$IMAGE_TAG"
    local JOBS_IMAGE_NAME="stackgres/jobs:$IMAGE_TAG"
    local CLUSTER_CONTROLLER_IMAGE_NAME="stackgres/cluster-controller:$IMAGE_TAG"
    local DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME="stackgres/distributedlogs-controller:$IMAGE_TAG"
    local ADMINUI_IMAGE_NAME="stackgres/admin-ui:$ADMINUI_IMAGE_TAG"
    docker_tag "$ORIGINAL_OPERATOR_IMAGE_NAME" "$OPERATOR_IMAGE_NAME"
    docker_tag "$ORIGINAL_RESTAPI_IMAGE_NAME" "$RESTAPI_IMAGE_NAME"
    docker_tag "$ORIGINAL_JOBS_IMAGE_NAME" "$JOBS_IMAGE_NAME"
    docker_tag "$ORIGINAL_CLUSTER_CONTROLLER_IMAGE_NAME" "$CLUSTER_CONTROLLER_IMAGE_NAME"
    docker_tag "$ORIGINAL_DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME" "$DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME"
    docker_tag "$ORIGINAL_ADMINUI_IMAGE_NAME" "$ADMINUI_IMAGE_NAME"
    load_operator_k8s_only
  else
    load_operator_k8s_only
  fi
}

load_operator_k8s_only() {
  echo "Loading operator images into Kubernetes registry"
  local IMAGE_NAME
  for IMAGE_NAME in \
    "$OPERATOR_IMAGE_NAME" \
    "$RESTAPI_IMAGE_NAME" \
    "$JOBS_IMAGE_NAME" \
    "$CLUSTER_CONTROLLER_IMAGE_NAME" \
    "$DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME" \
    "$ADMINUI_IMAGE_NAME"
  do
    echo "$IMAGE_NAME"
  done | xargs -n 1 -I % -P "$E2E_PARALLELISM" "$SHELL" $SHELL_XTRACE "$E2E_PATH/e2e" load_image_k8s '%'
  echo "All operator images loaded into Kubernetes registry"
}

pull_image_from() {
  [ -n "$1" -a -n "$2" -a -n "$3" ]
  local REPOSITORY="$1"
  local IMAGE_PATH="$2"
  local IMAGE="$3"
  local FROM_IMAGE="$REPOSITORY$IMAGE_PATH${IMAGE#*/}"
  echo "Pulling $IMAGE from $FROM_IMAGE..."
  docker_pull "$FROM_IMAGE"
  docker_tag "$FROM_IMAGE" "$IMAGE"
  echo "Pulled $IMAGE from $FROM_IMAGE"
}

operator_pull_policy() {
  echo $E2E_OPERATOR_PULL_POLICY
}

install_operator() {
  kubectl get namespace "$OPERATOR_NAMESPACE" > /dev/null 2>&1 \
    || kubectl create namespace "$OPERATOR_NAMESPACE"

  if [ "$E2E_SKIP_UPGRADE_FROM_PREVIOUS_OPERATOR" != "true" \
    -a -n "$STACKGRES_PREVIOUS_VERSION" ]
  then
    install_operator_previous_version "$@"
    echo "Installing operator version $STACKGRES_PREVIOUS_VERSION"
  fi

  if [ "$E2E_SKIP_UPGRADE_FROM_PREVIOUS_OPERATOR" != "true" \
    -a -n "$STACKGRES_PREVIOUS_VERSION" \
    -a -n "$E2E_UPGRADE_BEFORE_RUN_TEST" ]
  then
    E2E_BEFORE_RUN_TEST_FUNCTION=e2e_before_run_test_upgrade
    E2E_BEFORE_RUN_TEST_COUNT=
  else
    if [ "$E2E_SKIP_UPGRADE_FROM_PREVIOUS_OPERATOR" != "true" \
      -a -n "$STACKGRES_PREVIOUS_VERSION" ]
    then
      echo "Upgrading operator from version $(get_installed_operator_version) to version $STACKGRES_VERSION"
    else
      echo "Installing operator version $STACKGRES_VERSION"
    fi
    install_operator_only "$@"
  fi
}

e2e_before_run_test_upgrade() {
  E2E_BEFORE_RUN_TEST_COUNT="$((E2E_BEFORE_RUN_TEST_COUNT + 1))"
  if ! e2e_exclusive_lock \
    && [ "$E2E_UPGRADE_BEFORE_RUN_TEST" = "$E2E_BEFORE_RUN_TEST_COUNT" ]
  then
    echo "Upgrading operator from version $(get_installed_operator_version) to version $STACKGRES_VERSION"
    install_operator_only
  fi
}

get_installed_operator_version() {
  helm list -n "$OPERATOR_NAMESPACE" -o json | jq -r '.[] | select(.name == "stackgres-operator").app_version'
}

install_operator_only() {
  if [ "$E2E_USE_INTERMIDIATE_PRIVATE_REPO" = true ]
  then
    echo "Installing operator intermediate repo"
    set_up_private_repository
    upgrade_operator_from_private_repository \
      --install \
      $E2E_OPERATOR_OPTS "$@"
    return
  else
    echo "Installing operator vanilla"
    upgrade_operator_vanilla \
    --install \
    --set-string operator.image.name="${OPERATOR_IMAGE_NAME%:*}" --set-string operator.image.tag="${OPERATOR_IMAGE_NAME#*:}" \
    --set-string "operator.image.pullPolicy=$(operator_pull_policy)" \
    --set-string restapi.image.name="${RESTAPI_IMAGE_NAME%:*}" --set-string restapi.image.tag="${RESTAPI_IMAGE_NAME#*:}" \
    --set-string "restapi.image.pullPolicy=$(operator_pull_policy)" \
    --set-string jobs.image.name="${JOBS_IMAGE_NAME%:*}" --set-string jobs.image.tag="${JOBS_IMAGE_NAME#*:}" \
    --set-string "jobs.image.pullPolicy=$(operator_pull_policy)" \
    --set-string adminui.image.name="${ADMINUI_IMAGE_NAME%:*}" --set-string adminui.image.tag="${ADMINUI_IMAGE_NAME#*:}" \
    --set-string "adminui.image.pullPolicy=$(operator_pull_policy)" \
    --set-string "extensions.repositoryUrls[0]=$EXTENSIONS_REPOSITORY_URL" \
    --set-string developer.extraOpts[0]='-Dquarkus.log.category."io.stackgres".level=DEBUG' \
    --set-string developer.extraOpts[1]='-Dquarkus.log.category."io.quarkus".level=INFO' \
    --set-string developer.extraOpts[2]='-Dquarkus.log.category."io.stackgres.dbops".level=TRACE' \
    --set-string developer.extraOpts[3]='-Dquarkus.log.category."io.stackgres.backup".level=TRACE' \
    --set-string developer.extraOpts[4]='-Dquarkus.log.category."io.stackgres.wal-g".level=TRACE' \
    --set-string developer.extraOpts[5]='-Dquarkus.log.category."io.stackgres.patroni".level=TRACE' \
    --set-string developer.extraOpts[6]='-Dquarkus.log.category."io.stackgres.fluent-bit".level=TRACE' \
    --set-string developer.extraOpts[7]='-Dquarkus.log.category."io.stackgres.fluentd".level=TRACE' \
    --set-string developer.extraOpts[8]='-Dquarkus.log.category."io.stackgres.prometheus-postgres-exporter".level=TRACE' \
    --set-string developer.extraOpts[9]='-Dquarkus.log.category."okhttp3.logging.HttpLoggingInterceptor".level=TRACE' \
    $E2E_OPERATOR_OPTS "$@"
  fi
}

install_operator_previous_version() {
  kubectl get namespace "$OPERATOR_NAMESPACE" > /dev/null 2>&1 \
    || kubectl create namespace "$OPERATOR_NAMESPACE"

  install_operator_vanilla_from "$OPERATOR_PREVIOUS_VERSION_HELM_URL" \
    $E2E_OPERATOR_OPTS "$@"
}


install_operator_vanilla() {
  install_operator_vanilla_from "$OPERATOR_CHART_PATH" \
    "$@"
}

install_operator_vanilla_from() {
  helm install stackgres-operator --namespace "$OPERATOR_NAMESPACE" \
    "$@"
  update_ui_clear_password
}

upgrade_operator() {
  if [ "$E2E_USE_INTERMIDIATE_PRIVATE_REPO" = true ]
  then
    set_up_private_repository
    upgrade_operator_from_private_repository \
      --reuse-values \
      $E2E_OPERATOR_OPTS "$@"
    return
  fi

  upgrade_operator_vanilla \
    --set-string operator.image.name="${OPERATOR_IMAGE_NAME%:*}" --set-string operator.image.tag="${OPERATOR_IMAGE_NAME#*:}" \
    --set-string "operator.image.pullPolicy=$(operator_pull_policy)" \
    --set-string restapi.image.name="${RESTAPI_IMAGE_NAME%:*}" --set-string restapi.image.tag="${RESTAPI_IMAGE_NAME#*:}" \
    --set-string "restapi.image.pullPolicy=$(operator_pull_policy)" \
    --set-string jobs.image.name="${JOBS_IMAGE_NAME%:*}" --set-string jobs.image.tag="${JOBS_IMAGE_NAME#*:}" \
    --set-string "jobs.image.pullPolicy=$(operator_pull_policy)" \
    --set-string adminui.image.name="${ADMINUI_IMAGE_NAME%:*}" --set-string adminui.image.tag="${ADMINUI_IMAGE_NAME#*:}" \
    --set-string "adminui.image.pullPolicy=$(operator_pull_policy)" \
    --set-string "extensions.repositoryUrls[0]=$EXTENSIONS_REPOSITORY_URL" \
    --set-string developer.extraOpts[0]='-Dquarkus.log.category."io.stackgres".level=DEBUG' \
    --set-string developer.extraOpts[1]='-Dquarkus.log.category."io.quarkus".level=INFO' \
    --set-string developer.extraOpts[2]='-Dquarkus.log.category."io.stackgres.dbops".level=TRACE' \
    --set-string developer.extraOpts[3]='-Dquarkus.log.category."io.stackgres.backup".level=TRACE' \
    --set-string developer.extraOpts[4]='-Dquarkus.log.category."io.stackgres.wal-g".level=TRACE' \
    --set-string developer.extraOpts[5]='-Dquarkus.log.category."io.stackgres.patroni".level=TRACE' \
    --set-string developer.extraOpts[6]='-Dquarkus.log.category."io.stackgres.fluent-bit".level=TRACE' \
    --set-string developer.extraOpts[7]='-Dquarkus.log.category."io.stackgres.fluentd".level=TRACE' \
    --set-string developer.extraOpts[8]='-Dquarkus.log.category."io.stackgres.prometheus-postgres-exporter".level=TRACE' \
    --set-string developer.extraOpts[9]='-Dquarkus.log.category."okhttp3.logging.HttpLoggingInterceptor".level=TRACE' \
    --reuse-values \
    $E2E_OPERATOR_OPTS "$@"
}

upgrade_operator_vanilla() {
  helm upgrade stackgres-operator --namespace "$OPERATOR_NAMESPACE" "$OPERATOR_CHART_PATH" "$@"
  update_ui_clear_password
}

upgrade_operator_from_private_repository() {
  export PRIVATE_REPO_URI=$(get_private_repository_uri)
  export PRIVATE_OPERATOR_IMAGE_NAME="$PRIVATE_REPO_URI/stackgres/operator"
  export PRIVATE_RESTAPI_IMAGE_NAME="$PRIVATE_REPO_URI/stackgres/restapi"
  export PRIVATE_JOBS_IMAGE_NAME="$PRIVATE_REPO_URI/stackgres/jobs"
  export PRIVATE_ADMINUI_IMAGE_NAME="$PRIVATE_REPO_URI/stackgres/admin-ui"
  upgrade_operator_vanilla \
      --set-string operator.image.name="$PRIVATE_OPERATOR_IMAGE_NAME" --set-string operator.image.tag="$IMAGE_TAG" \
      --set-string "operator.image.pullPolicy=$(operator_pull_policy)" \
      --set-string restapi.image.name="$PRIVATE_RESTAPI_IMAGE_NAME" --set-string restapi.image.tag="$IMAGE_TAG" \
      --set-string "restapi.image.pullPolicy=$(operator_pull_policy)" \
      --set-string jobs.image.name="$PRIVATE_JOBS_IMAGE_NAME" --set-string jobs.image.tag="$IMAGE_TAG" \
      --set-string "jobs.image.pullPolicy=$(operator_pull_policy)" \
      --set-string adminui.image.name="$PRIVATE_ADMINUI_IMAGE_NAME" --set-string adminui.image.tag="$ADMINUI_IMAGE_TAG" \
      --set-string "adminui.image.pullPolicy=$(operator_pull_policy)" \
      --set serviceAccount.create=true \
      --set-string serviceAccount.repoCredentials=regcred \
      --set-string developer.extraOpts[0]='-Dquarkus.log.category."io.stackgres".level=DEBUG' \
      --set-string developer.extraOpts[1]='-Dquarkus.log.category."io.quarkus".level=INFO' \
      --set-string developer.extraOpts[2]='-Dquarkus.log.category."io.stackgres.dbops".level=TRACE' \
      --set-string developer.extraOpts[3]='-Dquarkus.log.category."io.stackgres.backup".level=TRACE' \
      --set-string developer.extraOpts[4]='-Dquarkus.log.category."io.stackgres.wal-g".level=TRACE' \
      --set-string developer.extraOpts[5]='-Dquarkus.log.category."io.stackgres.patroni".level=TRACE' \
      --set-string developer.extraOpts[6]='-Dquarkus.log.category."io.stackgres.fluent-bit".level=TRACE' \
      --set-string developer.extraOpts[7]='-Dquarkus.log.category."io.stackgres.fluentd".level=TRACE' \
      --set-string developer.extraOpts[8]='-Dquarkus.log.category."io.stackgres.prometheus-postgres-exporter".level=TRACE' \
      --set-string developer.extraOpts[9]='-Dquarkus.log.category."okhttp3.logging.HttpLoggingInterceptor".level=TRACE' \
      "$@"
}

update_ui_clear_password() {
  local PASSWORD
  PASSWORD="$(helm get values -n "$OPERATOR_NAMESPACE" stackgres-operator -o json \
    | jq -r '.authentication.password | select(. != null)' | tr -d '\n')"
  if [ -n "$PASSWORD" ]
  then
    kubectl patch secret -n "$OPERATOR_NAMESPACE" stackgres-restapi -p '{"data":{"clearPassword":"'"$(printf '%s' "$PASSWORD" | base64)"'"}}'
  fi
}

delete_operator() {
  delete_operator_only
  k8s_cleanup_namespace "$OPERATOR_NAMESPACE"
}

delete_operator_only() {
  ! helm get notes stackgres-operator --namespace "$OPERATOR_NAMESPACE" > /dev/null \
    || helm uninstall stackgres-operator --namespace "$OPERATOR_NAMESPACE" "$@" \
    || true
}

get_installed_operator_values() {
  helm get values --namespace "$OPERATOR_NAMESPACE" stackgres-operator | tail -n +2
}

store_operator_values() {
  get_installed_operator_values > "$TARGET_PATH/operator-values.yaml"
}

reinstall_operator_if_not_as_expected() {
  if [ "$E2E_SKIP_OPERATOR_INSTALL" = true ]
  then
    return
  fi
  if ! helm get notes stackgres-operator --namespace "$OPERATOR_NAMESPACE" > /dev/null 2>&1 \
    || [ "$(get_installed_operator_values)" != "$(cat "$TARGET_PATH/operator-values.yaml")" ]
  then
    if ! helm get notes stackgres-operator --namespace "$OPERATOR_NAMESPACE" > /dev/null 2>&1
    then
      echo "Re-installing operator since not installed"
    else
      echo "Re-installing operator since has different values"
      echo
      echo "Values expected:"
      cat "$TARGET_PATH/operator-values.yaml"
      echo
      echo "Values found:"
      get_installed_operator_values
      echo
    fi
    k8s_webhook_cleanup
    helm_cleanup
    k8s_cleanup

    kubectl create namespace "$OPERATOR_NAMESPACE"
    install_operator_only -f "$TARGET_PATH/operator-values.yaml"
    wait_pods_running "$OPERATOR_NAMESPACE"
    if helm get values -n "$OPERATOR_NAMESPACE" stackgres-operator | grep -q externalOperatorIp \
      && helm get values -n "$OPERATOR_NAMESPACE" stackgres-operator | grep -q externalOperatorPort
    then
      wait_services_available "$OPERATOR_NAMESPACE" 2
    else
      wait_services_available "$OPERATOR_NAMESPACE" 1
    fi
  fi
}

load_component_images_from() {
  [ -n "$1" ]
  local REPOSITORY="${1:-$COMPONENT_PUBLIC_REGISTRY}"
  local IMAGE_PATH="${2:-$COMPONENT_PUBLIC_REGISTRY_PATH}"
  local VERSION="${3:-$STACKGRES_VERSION}"
  get_component_images "$VERSION" \
    | xargs -n 1 -I % -P "$E2E_PARALLELISM" "$SHELL" $SHELL_XTRACE "$E2E_PATH/e2e" \
      load_component_image_from "$REPOSITORY" "$IMAGE_PATH" '%'
}

load_component_image_from() {
  [ -n "$1" -a -n "$2" -a -n "$3" ]
  local REPOSITORY="$1"
  local IMAGE_PATH="$2"
  local IMAGE="$3"
  local FROM_IMAGE="$REPOSITORY$IMAGE_PATH${IMAGE##*/}"
  echo "Pulling $IMAGE from $FROM_IMAGE..."
  docker_pull "$FROM_IMAGE"
  docker_tag "$FROM_IMAGE" "$IMAGE"
  echo "Image $IMAGE pulled from $FROM_IMAGE"
  load_image_k8s "$IMAGE"
}

get_component_images() {
  [ -n "$1" ]
  local VERSION="$1"
  if [ "$(get_version_as_number "$VERSION")" -le "$(get_version_as_number 1.0.0-alpha1)" ]
  then
    get_component_images_pre_1_0_0_alpha2 "$VERSION"
    return
  fi
  local COMPONENT_POSTGRESQL_VERSIONS="$(get_component_versions "$VERSION" postgresql)"
  local COMPONENT_PATRONI_VERSIONS="$(get_component_versions "$VERSION" patroni)"
  local COMPONENT_PGBOUNCER_VERSIONS="$(get_component_versions "$VERSION" pgbouncer)"
  local COMPONENT_POSTGRES_EXPORTER_VERSIONS="$(get_component_versions "$VERSION" prometheus-postgres-exporter)"
  local COMPONENT_ENVOY_VERSIONS="$(get_component_versions "$VERSION" envoy)"
  local COMPONENT_FLUENTBIT_VERSIONS="$(get_component_versions "$VERSION" fluentbit)"
  local COMPONENT_FLUENTD_VERSIONS="$(get_component_versions "$VERSION" fluentd)"
  local VERSION
  local SUBVERSION
  for VERSION in $COMPONENT_PATRONI_VERSIONS
  do
    for SUBVERSION in $COMPONENT_POSTGRESQL_VERSIONS
    do
      if [ "${VERSION#*-build-}" = "${SUBVERSION#*-build-}" ]
      then
        echo "docker.io/ongres/patroni:v${VERSION%-build-*}-pg${SUBVERSION%-build-*}-build-${VERSION#*-build-}"
      fi
    done
  done
  for VERSION in $COMPONENT_POSTGRESQL_VERSIONS
  do
    echo "docker.io/ongres/postgres-util:v$VERSION"
  done
  for VERSION in $COMPONENT_PGBOUNCER_VERSIONS
  do
    echo "docker.io/ongres/pgbouncer:v$VERSION"
  done
  for VERSION in $COMPONENT_POSTGRES_EXPORTER_VERSIONS
  do
    echo "docker.io/ongres/prometheus-postgres-exporter:v$VERSION"
  done
  for VERSION in $COMPONENT_ENVOY_VERSIONS
  do
    echo "docker.io/ongres/envoy:v$VERSION"
  done
  for VERSION in $COMPONENT_FLUENTBIT_VERSIONS
  do
    echo "docker.io/ongres/fluentbit:v$VERSION"
  done
  for VERSION in $COMPONENT_FLUENTD_VERSIONS
  do
    echo "docker.io/ongres/fluentd:v$VERSION"
  done
}

get_pom_url() {
  [ -n "$1" ]
  echo "https://gitlab.com/ongresinc/stackgres/-/raw/$1/stackgres-k8s/src/pom.xml"
}

get_component_versions() {
  [ -n "$1" -a -n "$2" ]
  local VERSION="$1"
  local COMPONENT="$2"
  (
  if [ "$STACKGRES_VERSION" = "$VERSION" ]
  then
    cat "$STACKGRES_PATH/src/common/src/main/resources/versions.properties"
  else
    curl -f -s "$(get_versions_url "$VERSION")"
  fi
  ) | grep -F "$COMPONENT=" \
    | cut -d '=' -f 2 | tr ',' '\n' \
    | sort -t ' ' -k 1V,1V
}

get_versions_url() {
  [ -n "$1" ]
  echo "https://gitlab.com/ongresinc/stackgres/-/raw/$1/stackgres-k8s/src/common/src/main/resources/versions.properties"
}

get_component_images_pre_1_0_0_alpha2() {
  [ -n "$1" ]
  local VERSION="$1"
  local BUILD
  BUILD="$(get_container_build_pre_1_0_0_alpha2 "$VERSION")"
  if [ "$(get_version_as_number "$VERSION")" -le "$(get_version_as_number 0.9.4)" ] \
    || [ "$(get_version_as_number "$VERSION")" -ge "$(get_version_as_number 1.0.0-alpha1)" ]
  then
    get_component_images_pre_0_9_5 "$BUILD"
    return
  fi
  local COMPONENT_POSTGRESQL_VERSIONS="$(get_component_versions_pre_1_0_0_alpha2 "$VERSION" postgresql)"
  local COMPONENT_PATRONI_VERSIONS="$(get_component_versions_pre_1_0_0_alpha2 "$VERSION" patroni)"
  local COMPONENT_PGBOUNCER_VERSIONS="$(get_component_versions_pre_1_0_0_alpha2 "$VERSION" pgbouncer)"
  local COMPONENT_POSTGRES_EXPORTER_VERSIONS="$(get_component_versions_pre_1_0_0_alpha2 "$VERSION" prometheus-postgres-exporter)"
  local COMPONENT_ENVOY_VERSIONS="$(get_component_versions_pre_1_0_0_alpha2 "$VERSION" envoy)"
  local COMPONENT_FLUENTBIT_VERSIONS="$(get_component_versions_pre_1_0_0_alpha2 "$VERSION" fluentbit)"
  local COMPONENT_FLUENTD_VERSIONS="$(get_component_versions_pre_1_0_0_alpha2 "$VERSION" fluentd)"
  local VERSION
  local SUBVERSION
  for VERSION in $COMPONENT_PATRONI_VERSIONS
  do
    for SUBVERSION in $COMPONENT_POSTGRESQL_VERSIONS
    do
      echo "docker.io/ongres/patroni-ext:v$VERSION-pg$SUBVERSION-build-$BUILD"
    done
  done
  for VERSION in $COMPONENT_POSTGRESQL_VERSIONS
  do
    echo "docker.io/ongres/postgres-util:v$VERSION-build-$BUILD"
  done
  for VERSION in $COMPONENT_PGBOUNCER_VERSIONS
  do
    echo "docker.io/ongres/pgbouncer:v$VERSION-build-$BUILD"
  done
  for VERSION in $COMPONENT_POSTGRES_EXPORTER_VERSIONS
  do
    echo "docker.io/ongres/prometheus-postgres-exporter:v$VERSION-build-$BUILD"
  done
  for VERSION in $COMPONENT_ENVOY_VERSIONS
  do
    echo "docker.io/ongres/envoy:v$VERSION-build-$BUILD"
  done
  for VERSION in $COMPONENT_FLUENTBIT_VERSIONS
  do
    echo "docker.io/ongres/fluentbit:v$VERSION-build-$BUILD"
  done
  for VERSION in $COMPONENT_FLUENTD_VERSIONS
  do
    echo "docker.io/ongres/fluentd:v$VERSION-build-$BUILD"
  done
}

get_container_build_pre_1_0_0_alpha2() {
  [ -n "$1" ]
  local VERSION="$1"
  (
  if [ "$STACKGRES_VERSION" = "$VERSION" ]
  then
    cat "$STACKGRES_PATH/src/pom.xml"
  else
    curl -f -s "$(get_pom_url "$VERSION")"
  fi
  ) | grep -F '<stackgres.containerBuild>' \
    | cut -d '>' -f 2 | cut -d '<' -f 1
}

get_component_versions_pre_1_0_0_alpha2() {
  [ -n "$1" -a -n "$2" ]
  local VERSION="$1"
  local COMPONENT="$2"
  (
  if [ "$STACKGRES_VERSION" = "$VERSION" ]
  then
    cat "$STACKGRES_PATH/src/operator/src/main/resources/versions.properties"
  else
    curl -f -s "$(get_versions_url_pre_1_0_0_alpha2 "$VERSION")"
  fi
  ) | grep -F "$COMPONENT=" \
    | cut -d '=' -f 2 | tr ',' '\n' \
    | sort -t ' ' -k 1V,1V
}

get_versions_url_pre_1_0_0_alpha2() {
  [ -n "$1" ]
  echo "https://gitlab.com/ongresinc/stackgres/-/raw/$1/stackgres-k8s/src/operator/src/main/resources/versions.properties"
}

get_component_images_pre_0_9_5() {
  [ -n "$1" ]
  local COMPONENTS_VERSIONS_YAML="$(curl -f -s "$(get_components_versions_url_pre_0_9_5 "$1")")"
  local COMPONENT_POSTGRESQL_VERSIONS="$(get_component_versions_pre_0_9_5 postgresql)"
  local COMPONENT_PATRONI_VERSIONS="$(get_component_versions_pre_0_9_5 patroni)"
  local COMPONENT_PGBOUNCER_VERSIONS="$(get_component_versions_pre_0_9_5 pgbouncer)"
  local COMPONENT_POSTGRES_EXPORTER_VERSIONS="$(get_component_versions_pre_0_9_5 postgres_exporter)"
  local COMPONENT_ENVOY_VERSIONS="$(get_component_versions_pre_0_9_5 envoy)"
  local COMPONENT_FLUENTBIT_VERSIONS="$(get_component_versions_pre_0_9_5 fluentbit)"
  local COMPONENT_FLUENTD_VERSIONS="$(get_component_versions_pre_0_9_5 fluentd)"
  local VERSION
  local SUBVERSION
  for VERSION in $COMPONENT_PATRONI_VERSIONS
  do
    echo "$VERSION"
  done | sort -t ' ' -k 1V,1V \
    | while read VERSION
      do
        for SUBVERSION in $COMPONENT_POSTGRESQL_VERSIONS
        do
          echo "$SUBVERSION"
        done | sort -t ' ' -k 1V,1V \
          | while read SUBVERSION
            do
              echo "docker.io/ongres/patroni:v$VERSION-pg$SUBVERSION-build-$1"
            done
      done
  for VERSION in $COMPONENT_POSTGRESQL_VERSIONS
  do
    echo "$VERSION"
  done | sort -t ' ' -k 1V,1V \
    | while read VERSION
      do
        echo "docker.io/ongres/postgres-util:v$VERSION-build-$1"
      done
  for VERSION in $COMPONENT_PGBOUNCER_VERSIONS
  do
    echo "$VERSION"
  done | sort -t ' ' -k 1V,1V \
    | while read VERSION
      do
        echo "docker.io/ongres/pgbouncer:v$VERSION-build-$1"
      done
  for VERSION in $COMPONENT_POSTGRES_EXPORTER_VERSIONS
  do
    echo "$VERSION"
  done | sort -t ' ' -k 1V,1V \
    | while read VERSION
      do
        echo "docker.io/ongres/prometheus-postgres-exporter:v$VERSION-build-$1"
      done
  for VERSION in $COMPONENT_ENVOY_VERSIONS
  do
    echo "$VERSION"
  done | sort -t ' ' -k 1V,1V \
    | while read VERSION
      do
        echo "docker.io/ongres/envoy:v$VERSION-build-$1"
      done
  for VERSION in $COMPONENT_FLUENTBIT_VERSIONS
  do
    echo "$VERSION"
  done | sort -t ' ' -k 1V,1V \
    | while read VERSION
      do
        echo "docker.io/ongres/fluentbit:v$VERSION-build-$1"
      done
  for VERSION in $COMPONENT_FLUENTD_VERSIONS
  do
    echo "$VERSION"
  done | sort -t ' ' -k 1V,1V \
    | while read VERSION
      do
        echo "docker.io/ongres/fluentd:v$VERSION-build-$1"
      done
}

get_components_versions_url_pre_0_9_5() {
  [ -n "$1" ]
  echo "https://stackgres.io/downloads/stackgres-k8s/stackgres/components/$1/versions.yaml"
}

get_component_versions_pre_0_9_5() {
  local X_UNSET=true
  if echo "$-" | grep -q x
  then
    X_UNSET=false
  fi
  "$X_UNSET" || set +x
  [ -n "$COMPONENTS_VERSIONS_YAML" ]
  echo "$COMPONENTS_VERSIONS_YAML" | tr -d '\n' \
    | sed 's/.*\s\+'"$1"':\s\+versions:\(\(\s\+-\s\+"\([^"]\+\)"\)\+\).*/\1/g' \
    | tr -d '" ' | sed 's/^-//' | tr '-' '\n'
  "$X_UNSET" || set -x
}

get_version_as_number() {
  notrace_function traceable_get_version_as_number "$1"
}

traceable_get_version_as_number() {
  local VERSION="$1"

  local CARDINALITY="$(echo "$VERSION" | tr '.' '\n' | wc -l)"
  local MAJOR=""
  local MINOR
  local PATCH="0"
  local SUFFIX=""
  local SUFFIX_VERSION="0"
  local VERSION_SUFFIX=""
  local i

  if [ "$CARDINALITY" -gt 3 ]
  then
    echo "Unexpeted version format for $VERSION"
    return 1
  fi

  MAJOR="$(echo "$VERSION" | cut -d . -f 1)"
  MINOR="$(echo "$VERSION" | cut -d . -f 2)"
  if [ "$CARDINALITY" -eq 3 ]
  then
    PATCH="$(echo "$VERSION" | cut -d . -f 3)"
    if [ "${PATCH#*-}" = "$PATCH" ]
    then
      SUFFIX=""
    else
      SUFFIX="${PATCH#*-}"
      PATCH="${PATCH%%-*}"
    fi
  else
    if [ "${MINOR#*-}" = "$MINOR" ]
    then
      SUFFIX=""
    else
      SUFFIX="${MINOR#*-}"
      MINOR="${MINOR%%-*}"
    fi
  fi

  if [ "${SUFFIX%-SNAPSHOT}" != "$SUFFIX" ]
  then
    SUFFIX="${SUFFIX%-SNAPSHOT}"
  fi

  if [ -z "$SUFFIX" -o "$SUFFIX" = "SNAPSHOT" ]
  then
    SUFFIX=""
    SUFFIX_VERSION=0
  else
    if [ "${SUFFIX%%[0-9]*}" = "$SUFFIX" ]
    then
      echo "Unexpeted version format for $VERSION"
      return 1
    fi
    SUFFIX_VERSION="${SUFFIX#${SUFFIX%%[0-9]*}}"
    SUFFIX="${SUFFIX%$SUFFIX_VERSION}"
  fi

  local SUFFIX_MAJOR_VERSION
  if [ "$SUFFIX" = "alpha" ]
  then
    SUFFIX_MAJOR_VERSION=1
  elif [ "$SUFFIX" = "beta" ]
  then
    SUFFIX_MAJOR_VERSION=2
  elif [ -z "$SUFFIX" ]
  then
    SUFFIX_MAJOR_VERSION=3
  else
    echo "Unexpeted version format for $VERSION"
    return 1
  fi

  printf "%03d%03d%03d%d%03d\n" "$MAJOR" "$MINOR" "$PATCH" "$SUFFIX_MAJOR_VERSION" "$SUFFIX_VERSION"
}

get_operator_image_tag() {
  [ -n "$1" ]
  local VERSION="$1"
  local VERSION_AS_NUMBER="$(get_version_as_number "$1")"

  if [ "$VERSION" = "$STACKGRES_VERSION" ]
  then
    echo "$IMAGE_TAG"
  else
    if ([ "$(get_version_as_number "$1")" -lt "$(get_version_as_number 1.0.0-alpha2)" ] \
      && [ "$(get_version_as_number "$1")" -ge "$(get_version_as_number 1.0.0-alpha1)" ]) \
      || [ "$(get_version_as_number "$1")" -lt "$(get_version_as_number 0.9.5)" ]
    then
      echo "$VERSION-jvm"
    else
      echo "$VERSION"
    fi
  fi
}

get_operator_image() {
  local TAG
  TAG="$(get_operator_image_tag "$1")"
  echo "stackgres/operator:$TAG"
}

get_restapi_image() {
  local TAG
  TAG="$(get_operator_image_tag "$1")"
  echo "stackgres/restapi:$TAG"
}

get_adminui_image() {
  local TAG
  TAG="$(get_operator_image_tag "$1")"
  echo "stackgres/admin-ui:${TAG%-jvm}"
}

get_operator_helm_url() {
  local VERSION="$1"
  if [ "$(get_version_as_number "$VERSION")" -le "$(get_version_as_number 0.9.2)" ]
  then
    get_operator_helm_url_pre_0_9_3
    return
  fi
  echo "https://stackgres.io/downloads/stackgres-k8s/stackgres/$VERSION/helm/stackgres-operator.tgz"
}

get_operator_helm_url_pre_0_9_3() {
  echo "https://stackgres.io/downloads/stackgres-k8s/stackgres/$VERSION/helm-operator.tgz"
}

get_cluster_helm_url() {
  local VERSION="$1"
  if [ "$(get_version_as_number "$VERSION")" -le "$(get_version_as_number 0.9.2)" ]
  then
    echo "https://stackgres.io/downloads/stackgres-k8s/stackgres/$VERSION/demo-helm-cluster.tgz"
    return
  fi
  echo "https://stackgres.io/downloads/stackgres-k8s/stackgres/$VERSION/helm/stackgres-cluster-demo.tgz"
}

export STACKGRES_OPERATOR_IMAGE="$(get_operator_image "$STACKGRES_VERSION")"
export STACKGRES_RESTAPI_IMAGE="$(get_restapi_image "$STACKGRES_VERSION")"
export STACKGRES_ADMINUI_IMAGE="$(get_adminui_image "$STACKGRES_VERSION")"

setup_versions() {
  export STACKGRES_PREVIOUS_VERSION="${STACKGRES_PREVIOUS_VERSION:-0.9.5}"
  export OPERATOR_PREVIOUS_VERSION_HELM_URL="${OPERATOR_PREVIOUS_VERSION_HELM_URL:-$(get_operator_helm_url "$STACKGRES_PREVIOUS_VERSION")}"
  export CLUSTER_PREVIOUS_VERSION_HELM_URL="${CLUSTER_PREVIOUS_VERSION_HELM_URL:-$(get_cluster_helm_url "$STACKGRES_PREVIOUS_VERSION")}"
  export STACKGRES_PREVIOUS_OPERATOR_IMAGE="$(get_operator_image "$STACKGRES_PREVIOUS_VERSION")"
  export STACKGRES_PREVIOUS_RESTAPI_IMAGE="$(get_restapi_image "$STACKGRES_PREVIOUS_VERSION")"
  export STACKGRES_PREVIOUS_ADMINUI_IMAGE="$(get_adminui_image "$STACKGRES_PREVIOUS_VERSION")"

  echo "StackGres version used is $STACKGRES_VERSION"
  echo "* StackGres operator image used is $STACKGRES_OPERATOR_IMAGE"
  echo "* StackGres restapi image used is $STACKGRES_RESTAPI_IMAGE"
  echo "* StackGres admin-ui image used is $STACKGRES_ADMINUI_IMAGE"
  echo "Previous StackGres version used is $STACKGRES_PREVIOUS_VERSION"
  echo "* Previous StackGres operator image used is $STACKGRES_PREVIOUS_OPERATOR_IMAGE"
  echo "* Previous StackGres restapi image used is $STACKGRES_PREVIOUS_RESTAPI_IMAGE"
  echo "* Previous StackGres admin-ui image used is $STACKGRES_PREVIOUS_ADMINUI_IMAGE"
}
