#!/bin/sh

export E2E_TEST_BEFORE_ALL_FUNCTION="${E2E_TEST_BEFORE_ALL_FUNCTION:-e2e_test_before_all}"
export E2E_TEST_INSTALL_FUNCTION="${E2E_TEST_INSTALL_FUNCTION:-e2e_test_install}"
export E2E_TEST_FUNCTION="${E2E_TEST_FUNCTION:-e2e_test}"
export E2E_BEFORE_RUN_TEST_FUNCTION="${E2E_BEFORE_RUN_TEST_FUNCTION:-e2e_before_run_test}"
export E2E_AFTER_RUN_TEST_FUNCTION="${E2E_AFTER_RUN_TEST_FUNCTION:-e2e_after_run_test}"
export E2E_TEST_UNINSTALL_FUNCTION="${E2E_TEST_UNINSTALL_FUNCTION:-e2e_test_uninstall}"
export E2E_TEST_AFTER_ALL_FUNCTION="${E2E_TEST_AFTER_ALL_FUNCTION:-e2e_test_after_all}"
export SPEC_PATH="$E2E_PATH/spec"

e2e_test_before_all() {
  true
}

e2e_test_install() {
  create_or_replace_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE" "$(e2e_test_install_pods)"

  wait_pods_running "$CLUSTER_NAMESPACE" "$(e2e_test_install_pods)"
  wait_cluster "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"
}

e2e_test_install_pods() {
  echo 1
}

e2e_test() {
  echo "You should define a test function"
  false
}

e2e_test_uninstall() {
  helm_cleanup_chart "$CLUSTER_NAME" "$CLUSTER_NAMESPACE"

  k8s_async_cleanup_namespace "$CLUSTER_NAMESPACE"
}

e2e_test_after_all() {
  true
}

e2e_exclusive_lock() {
  false
}

get_all_specs() {
  find "$SPEC_PATH" -maxdepth 1 -type f | grep '^.*/[^\.]\+$'
}

get_all_env_specs() {
  if [ -d "$SPEC_PATH/$E2E_ENV" ]
  then
    find "$SPEC_PATH/$E2E_ENV" -maxdepth 1 -type f | grep '^.*/[^\.]\+$'
  fi
}

get_all_exclusive_specs() {
  local SPEC_FILE
  get_all_specs \
    | while IFS="$(printf '\n')" read SPEC_FILE
      do
        (
        . "$SPEC_FILE"
        if e2e_exclusive_lock
        then
          echo_raw "$SPEC_FILE"
        fi
        )
      done
}

get_all_non_exclusive_specs() {
  local SPEC_FILE
  get_all_specs \
    | while IFS="$(printf '\n')" read SPEC_FILE
      do
        (
        . "$SPEC_FILE"
        if ! e2e_exclusive_lock
        then
          echo_raw "$SPEC_FILE"
        fi
        )
      done
}

get_all_exclusive_env_specs() {
  local SPEC_FILE
  get_all_env_specs \
    | while IFS="$(printf '\n')" read SPEC_FILE
      do
        (
        . "$SPEC_FILE"
        if e2e_exclusive_lock
        then
          echo_raw "$SPEC_FILE"
        fi
        )
      done
}

get_all_non_exclusive_env_specs() {
  local SPEC_FILE
  get_all_env_specs \
    | while IFS="$(printf '\n')" read SPEC_FILE
      do
        . "$SPEC_FILE"
        if ! e2e_exclusive_lock
        then
          echo_raw "$SPEC_FILE"
        fi
      done
}

spec() {
  local RESULT
  local EXIT_CODE
  local SPEC_FILE="$1"
  local SPEC_BEFORE_FILE="$SPEC_FILE.before"
  local SPEC_AFTER_FILE="$SPEC_FILE.after"
  local SPEC_VALUES_FILE="$1.values.yaml"
  local SPEC_PATH="$(dirname "$SPEC_FILE")"
  local SPEC_NAME="$(basename "$SPEC_FILE")"
  local CLUSTER_NAMESPACE="$SPEC_NAME-$(printf '%x' "$(date +%s)")"
  local CLUSTER_NAME="$SPEC_NAME"
  local E2E_SKIP_SPEC_INSTALL="${E2E_SKIP_SPEC_INSTALL:-false}"
  local E2E_SKIP_SPEC_BEFORE_ALL="${E2E_SKIP_SPEC_BEFORE_ALL:-false}"
  local E2E_SKIP_SPEC_AFTER_ALL="${E2E_SKIP_SPEC_AFTER_ALL:-false}"
  local LOG_PATH="$TARGET_PATH/logs/$SPEC_NAME"
  local SPEC_TIME="0"
  export SPEC_FILE SPEC_NAME CLUSTER_NAMESPACE CLUSTER_NAME LOG_PATH

  mkdir -p "$LOG_PATH"

  if [ ! -f "$SPEC_VALUES_FILE" ]
  then
    SPEC_VALUES_FILE="$SPEC_PATH/default.values.yaml"
  fi

  . "$SPEC_FILE"

  if "${E2E_LOCK:-true}" && e2e_exclusive_lock
  then
    E2E_LOCK=false flock "$TARGET_PATH/exclusive-lock" \
      "$SHELL" $SHELL_XTRACE "$E2E_PATH/e2e" spec "$1"
    return
  fi

  if "${E2E_LOCK:-true}"
  then
    E2E_LOCK=false flock -s "$TARGET_PATH/exclusive-lock" \
      "$SHELL" $SHELL_XTRACE "$E2E_PATH/e2e" spec "$1"
    return
  fi

  rm -f "$TARGET_PATH/$SPEC_NAME.failed"
  echo -n > "$LOG_PATH/$SPEC_NAME.log"

  trap_exec tail -f "$LOG_PATH/$SPEC_NAME.log" \
    | (
    set +x
    while IFS="$(printf '\n')" read -r line
    do
      echo_raw "$(date +"%Y-%m-%d %H:%M:%S") [$SPEC_NAME] $line"
    done
    ) &

  if ! flock "$TARGET_PATH/check-operator-lock" \
      "$SHELL" $SHELL_XTRACE "$E2E_PATH/e2e" reinstall_operator_if_not_as_expected >> "$LOG_PATH/$SPEC_NAME.log"
  then
    echo "$SPEC_NAME. Operator re-install failed. See file $LOG_PATH/$SPEC_NAME.log for details" > "$TARGET_PATH/$SPEC_NAME.failed"
    echo "$SPEC_NAME. Operator re-install failed. See file $LOG_PATH/$SPEC_NAME.log for details" >> "$TARGET_PATH/logs/results.log"
    return 1
  fi

  echo
  echo "================================================================"
  echo "Running $SPEC_NAME tests"
  echo "================================================================"
  echo

  local START="$(date +%s)"
  try_function run_spec >> "$LOG_PATH/$SPEC_NAME.log" 2>&1
  SPEC_TIME="$(($(date +%s)-START))"
  echo "$SPEC_TIME" > "$TARGET_PATH/$SPEC_NAME.duration"
  if ! "$RESULT"
  then
    echo "$SPEC_NAME. FAIL. See file $LOG_PATH/$SPEC_NAME.log for details" > "$TARGET_PATH/$SPEC_NAME.failed"
    echo "$SPEC_NAME. FAIL. See file $LOG_PATH/$SPEC_NAME.log for details" >> "$TARGET_PATH/logs/results.log"
    if [ "$E2E_SPEC_TRY_UNINSTALL_ON_FAILURE" = "true" ]
    then
      cleanup_spec || true
    fi
    return "$EXIT_CODE"
  fi
  echo "$SPEC_NAME. SUCCESS. Test took $SPEC_TIME seconds" >> "$TARGET_PATH/logs"/results.log
}

run_spec() {
  if [ "$E2E_SKIP_SPEC_BEFORE_ALL" != true ]
  then
    "$E2E_TEST_BEFORE_ALL_FUNCTION"
  fi

  if [ "$E2E_SKIP_SPEC_INSTALL" != true ]
  then
    "$E2E_TEST_INSTALL_FUNCTION"
  fi

  "$E2E_TEST_FUNCTION"

  cleanup_spec
}

cleanup_spec(){
  if [ "$E2E_SKIP_SPEC_UNINSTALL" != true ]
  then
    "$E2E_TEST_UNINSTALL_FUNCTION"
  fi

  "$E2E_TEST_AFTER_ALL_FUNCTION"
}

run_test() {
  "$E2E_BEFORE_RUN_TEST_FUNCTION"
  local TEST_NAME="$1"
  shift
  echo
  echo "----------------------------------------------------------------"
  echo "Running test $TEST_NAME"
  echo "----------------------------------------------------------------"
  echo
  local RESULT
  local EXIT_CODE
  try_function "$@"
  if ! "$RESULT"
  then
    return "$EXIT_CODE"
  fi
  echo "$TEST_NAME. SUCCESS."
  "$E2E_AFTER_RUN_TEST_FUNCTION"
}

e2e_before_run_test() {
  true
}

e2e_after_run_test() {
  true
}

calculate_spec_hashes() {
  local GLOBAL_SPEC_HASH
  GLOBAL_SPEC_HASH="$( (
      ls -1 "$E2E_PATH/e2e" "$E2E_PATH/envs/$E2E_ENV"/* \
        "$SPEC_PATH/default.values.yaml" "$SPEC_PATH/abstract"/* \
        "$E2E_PATH/utils"/* 2>/dev/null | sort \
        | while read FILE
          do
            if [ -f "$FILE" ]
            then
              cat "$FILE"
            fi
          done
    ) \
      | md5sum | cut -d ' ' -f 1)"
  (
    get_all_specs
    get_all_env_specs
  ) \
    | while read SPEC
      do
        SPEC_HASH="$( (
          echo "$GLOBAL_SPEC_HASH"
          basename "$SPEC"
          basename "$(dirname "$SPEC")"
          ls -1 "$SPEC"* | sort \
            | while read FILE
              do
                if [ -f "$FILE" ]
                then
                  cat "$FILE"
                fi
              done
        ) \
          | md5sum | cut -d ' ' -f 1)"
        echo "$SPEC:$SPEC_HASH"
      done
}
