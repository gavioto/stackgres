#!/bin/sh

assert_string_contains() {
  EXPECTED="$1"
  ACTUAL="$2"

  if echo "$ACTUAL" | grep "$EXPECTED" > /dev/null
  then 
    echo "SUCCESS. $ACTUAL contains $EXPECTED"
  else
    echo "FAIL. $ACTUAL doesn't contain $EXPECTED"
    return 1
  fi
}

assert_string_equal(){

  EXPECTED="$1"
  ACTUAL="$2"

  if [ "$ACTUAL" = "$EXPECTED" ]
  then 
    echo "SUCCESS. $ACTUAL is equal to $EXPECTED"
  else
    echo "FAIL. $ACTUAL is not equal to $EXPECTED"
    return 1
  fi

}

assert_string_not_equal(){

  EXPECTED="$1"
  ACTUAL="$2"

  if [ "$ACTUAL" = "$EXPECTED" ]
  then 
    echo "FAIL. $ACTUAL is equal to $EXPECTED"
    return 1
  else
    echo "SUCCESS. $ACTUAL is not equal to $EXPECTED"
  fi

}

assert_greater_than(){
  local EXPECTED="$1"
  local ACTUAL="$2"

  if [ "$ACTUAL" -gt "$EXPECTED" ]
  then 
    echo "SUCCESS. $ACTUAL is greater than $EXPECTED"
  else
    echo "FAIL. $ACTUAL is not is greater than $EXPECTED"
    return 1
  fi
}

assert_api_error(){
  RESPONSE="$1"
  EXPECTED_ERROR_TYPE="${EXPECTED_ERROR_TYPE:-"constraint-violation"}"
  EXPECTED_ERROR_TITLE="${EXPECTED_ERROR_TITLE:-"do not comply with the syntactic rules"}"
  EXPECTED_ERROR_DETAIL="${EXPECTED_ERROR_DETAIL:-"in body"}"
  EXPECTED_ERROR_FIELD="${EXPECTED_ERROR_FIELD:-""}"
  ERROR_TYPE="$(echo $RESPONSE | jq '.type' )"

  assert_string_contains "$EXPECTED_ERROR_TYPE" "$ERROR_TYPE"

  ERROR_TITLE="$(echo "$RESPONSE" | jq '.title' )"

  assert_string_contains "$EXPECTED_ERROR_TITLE" "$ERROR_TITLE"

  ERROR_DETAIL="$(echo "$RESPONSE" | jq '.detail' )"

  assert_string_contains "$EXPECTED_ERROR_DETAIL" "$ERROR_DETAIL"

  if [ "$EXPECTED_ERROR_FIELD" != "" ]
  then
    ERROR_FIELD="$(echo "$RESPONSE" | jq '.fields[0]' )"
    assert_string_contains "$EXPECTED_ERROR_FIELD" "$ERROR_FIELD"
  fi
}
