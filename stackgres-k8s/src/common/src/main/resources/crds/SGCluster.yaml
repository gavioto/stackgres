apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: sgclusters.stackgres.io
spec:
  group: stackgres.io
  scope: Namespaced
  names:
    kind: SGCluster
    listKind: SGClusterList
    plural: sgclusters
    singular: sgcluster
    shortNames:
      - sgclu
  versions:
    - name: v1
      served: true
      storage: true
      additionalPrinterColumns:
      - name: version
        type: string
        jsonPath: .spec.postgresVersion
      - name: instances
        type: integer
        jsonPath: .spec.instances 
      - name: Profile
        type: string
        jsonPath: .spec.sgInstanceProfile
      - name: Disk
        type: string
        jsonPath: .spec.pods.persistentVolume.size
      - name: prometheus-Autobind
        type: string
        jsonPath: .spec.prometheusAutobind
        priority: 1
      - name: pool-config
        type: string
        jsonPath: .spec.configurations.sgPoolingConfig
        priority: 1
      - name: postgres-config
        type: string
        jsonPath: .spec.configurations.sgPostgresConfig
        priority: 1
      schema:
        openAPIV3Schema:
          type: object
          required: ["metadata", "spec"]
          properties:
            metadata:
              type: object
              properties:
                name:
                  type: string
                  description: |
                    Name of the StackGres cluster. Following [Kubernetes naming conventions](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/architecture/identifiers.md), it must be an rfc1035/rfc1123 subdomain, that is, up to 253 characters consisting of one or more lowercase labels separated by `.`. Where each label is an alphanumeric (a-z, and 0-9) string, with a maximum length of 63 characters, with the `-` character allowed anywhere except the first or last character.

                    The name must be unique across all StackGres clusters in the same namespace. The full cluster name includes the namespace in which the cluster is created.
            spec:
              type: object
              properties:
                postgres:
                  type: object
                  description: |
                    This section allow to configure Postgres features
                  properties:
                    ssl:
                      type: object
                      description: |
                        This section allow to use SSL when connecting to Postgres
                      properties:
                        enabled:
                          type: boolean
                          description: |
                            Allow to enable SSL for connections to Postgres. By default is `false`.
                            
                            If `true` fields `certificateSecretKeySelector` and `privateKeySecretKeySelector` will be required.
                        certificateSecretKeySelector:
                          type: object
                          description: |
                            Secret key selector for the certificate or certificate chain used for SSL connections.
                          properties:
                            name:
                              type: string
                              description: |
                                The name of Secret that contains the certificate or certificate chain for SSL connections
                            key:
                              type: string
                              description: |
                                The key of Secret that contains the certificate or certificate chain for SSL connections
                          required: [ "name", "key" ]
                        privateKeySecretKeySelector:
                          type: object
                          description: |
                            Secret key selector for the private key used for SSL connections.
                          properties:
                            name:
                              type: string
                              description: |
                                The name of Secret that contains the private key for SSL connections
                            key:
                              type: string
                              description: |
                                The key of Secret that contains the private key for SSL connections
                          required: [ "name", "key" ]
                postgresVersion:
                  type: string
                  description: |
                    Postgres version used on the cluster. It is either of:
                    *  The string 'latest', which automatically sets the latest major.minor Postgres version.
                    *  A major version, like '12' or '11', which sets that major version and the latest minor version.
                    *  A specific major.minor version, like '12.2'.
                instances:
                  type: integer
                  minimum: 1
                  maximum: 16
                  description: |
                    Number of StackGres instances for the cluster. Each instance contains one Postgres server. Out of all of the Postgres servers, one is elected as the master, the rest remain as read-only replicas.
                sgInstanceProfile:
                  type: string
                  description: |
                    Name of the [SGInstanceProfile](https://stackgres.io/doc/latest/04-postgres-cluster-management/03-resource-profiles/). A SGInstanceProfile defines CPU and memory limits. Must exist before creating a cluster. When no profile is set, a default (currently: 1 core, 2 GiB RAM) one is used.
                metadata:
                  type: object
                  description: Metadata information from cluster created resources.
                  properties:
                    annotations:
                      type: object
                      description: Custom Kubernetes [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) to be passed to resources created and managed by StackGres.
                      properties:
                        allResources:
                          type: object
                          description: Annotations to attach to any resource created or managed by StackGres.
                          additionalProperties:
                            type: string
                        pods:
                          type: object
                          description: Annotations to attach to pods created or managed by StackGres.
                          additionalProperties:
                            type: string
                        services:
                          type: object
                          description: Annotations to attach to services created or managed by StackGres.
                          additionalProperties:
                            type: string
                postgresServices:
                  type: object
                  description: Kubernetes [services](https://kubernetes.io/docs/concepts/services-networking/service/) created or managed by StackGres.
                  properties:
                    primary:
                      type: object
                      description: Configuration for the `-primary` service. It provides a stable connection (regardless of primary failures or switchovers) to the read-write Postgres server of the cluster.
                      properties:
                        enabled:
                          type: boolean
                          description: Specify if the `-primary` service should be created or not.
                        type:
                          type: string
                          enum: ["ClusterIP", "LoadBalancer", "NodePort"]
                          description: Specifies the type of Kubernetes service.
                        annotations:
                          type: object
                          additionalProperties:
                            type: string
                          description: Custom Kubernetes [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) passed to the `-primary` service.
                    replicas:
                      type: object
                      description: Configuration for the `-replicas` service. It provides a stable connection (regardless of replica node failures) to any read-only Postgres server of the cluster. Read-only servers are load-balanced via this service.
                      properties:
                        enabled:
                          type: boolean
                          description: Specify if the `-replicas` service should be created or not.
                        type:
                          type: string
                          enum: ["ClusterIP", "LoadBalancer", "NodePort"]
                          description: Specifies the type of Kubernetes service.
                        annotations:
                          type: object
                          additionalProperties:
                            type: string
                          description: Custom Kubernetes [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) passed to the `-replicas` service.
                pods:
                  type: object
                  description: Cluster pod's configuration.
                  properties:
                    persistentVolume:
                      type: object
                      description: Pod's persistent volume configuration.
                      properties:
                        size:
                          type: string
                          pattern: '^[0-9]+(\.[0-9]+)?(Mi|Gi|Ti)$'
                          description: |
                            Size of the PersistentVolume set for each instance of the cluster. This size is specified either in Mebibytes, Gibibytes or Tebibytes (multiples of 2^20, 2^30 or 2^40, respectively).
                        storageClass:
                          type: string
                          description: |
                            Name of an existing StorageClass in the Kubernetes cluster, used to create the PersistentVolumes for the instances of the cluster.
                      required: ["size"]
                    disableConnectionPooling:
                      type: boolean
                      description: If set to `true`, avoids creating a connection pooling (using [PgBouncer](https://www.pgbouncer.org/)) sidecar.
                    disableMetricsExporter:
                      type: boolean
                      description: If set to `true`, avoids creating the Prometheus exporter sidecar. Recommended when there's no intention to use Prometheus for monitoring.
                    disablePostgresUtil:
                      type: boolean
                      description: If set to `true`, avoids creating the `postgres-util` sidecar. This sidecar contains usual Postgres administration utilities *that are not present in the main (`patroni`) container*, like `psql`. Only disable if you know what you are doing.
                    metadata:
                      type: object
                      description: Pod custom metadata information.
                      properties:
                        labels:
                          type: object
                          additionalProperties:
                            type: string
                          description: Additional labels for StackGres Pods.
                    scheduling:
                      type: object
                      description: Pod custom scheduling configuration.
                      properties:
                        nodeSelector:
                          type: object
                          additionalProperties:
                            type: string
                          description: Pod custom node selector.
                        tolerations:
                          type: array
                          description: Pod custom node tolerations
                          items:
                            type: object
                            description: Pod custom node toleration
                            properties:
                              key:
                                type: string
                                description: |
                                  Key is the taint key that the toleration applies to. Empty means match all taint
                                   keys. If the key is empty, operator must be Exists; this combination means to
                                   match all values and all keys.
                              operator:
                                type: string
                                description: |
                                  Operator represents a key's relationship to the value. Valid operators are Exists
                                   and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that
                                   a pod can tolerate all taints of a particular category.
                              value:
                                type: string
                                description: |
                                  Value is the taint value the toleration matches to. If the operator is Exists, the
                                   value should be empty, otherwise just a regular string.
                              effect:
                                type: string
                                description: |
                                  Effect indicates the taint effect to match. Empty means match all taint effects.
                                   When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
                              tolerationSeconds:
                                type: integer
                                description: |
                                  TolerationSeconds represents the period of time the toleration (which must be of
                                   effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
                                   it is not set, which means tolerate the taint forever (do not evict). Zero and
                                   negative values will be treated as 0 (evict immediately) by the system.
                  required: ["persistentVolume"]
                configurations:
                  type: object
                  description: |
                    Cluster custom configurations.
                  properties:
                    sgPostgresConfig:
                      type: string
                      description: |
                        Name of the [SGPostgresConfig](https://stackgres.io/doc/latest/reference/crd/sgpgconfig) used for the cluster. It must exist. When not set, a default Postgres config, for the major version selected, is used.
                    sgPoolingConfig:
                      type: string
                      description: |
                        Name of the [SGPoolingConfig](https://stackgres.io/doc/latest/reference/crd/sgpoolconfig) used for this cluster. Each pod contains a sidecar with a connection pooler (currently: [PgBouncer](https://www.pgbouncer.org/)). The connection pooler is implemented as a sidecar.

                        If not set, a default configuration will be used. Disabling connection pooling altogether is possible if the disableConnectionPooling property of the pods object is set to true.
                    sgBackupConfig:
                      type: string
                      description: |
                        Name of the [SGBackupConfig](https://stackgres.io/doc/latest/reference/crd/sgbackupconfig) to use for the cluster. It defines the backups policy, storage and retention, among others, applied to the cluster. When not set, a default backup config is used.
                initialData:
                  type: object
                  description: Cluster initialization data options. Cluster may be initialized empty, or from a backup restoration. Specifying scripts to run on the database after cluster creation is also possible.
                  properties:
                    restore:
                      type: object
                      properties:
                        fromBackup:
                          type: object
                          description: |
                            From which backup to restore and how the process is configured
                          properties:
                            uid:
                              type: string
                              description: |
                                When set to the UID of an existing [SGBackup](https://stackgres.io/doc/latest/reference/crd/sgbackup), the cluster is initialized by restoring the backup data to it. If not set, the cluster is initialized empty. The selected backup must be in the same namespace.
                            pointInTimeRecovery:
                              type: object
                              description: |
                                It is possible to restore the database to its state at any time since your backup was taken using Point-in-Time Recovery (PITR) as long as another backup newer than the PITR requested restoration date does not exists.

                                Point In Time Recovery (PITR). PITR allow to restore the database state to an arbitrary point of time in the past, as long as you specify a backup older than the PITR requested restoration date and does not exists a backup newer than the same restoration date.

                                See also: https://www.postgresql.org/docs/current/continuous-archiving.html
                              properties:
                                restoreToTimestamp:
                                  type: string
                                  description: |
                                    An ISO 8601 date, that holds UTC date indicating at which point-in-time the database have to be restored.
                        downloadDiskConcurrency:
                          type: integer
                          minimum: 1
                          description: |
                            The backup fetch process may fetch several streams in parallel. Parallel fetching is enabled when set to a value larger than one.

                            If not specified it will be interpreted as latest.
                    scripts:
                      type: array
                      description: |
                        A list of SQL scripts executed in sequence, exactly once, when the database is bootstrap and/or after restore is completed.
                      items:
                        type: object
                        description: |
                          Scripts are executed in auto-commit mode with the user `postgres` in the specified database (or in database `postgres` if not specified).

                          Fields `script` and `scriptFrom` are mutually exclusive and only one of them is required.
                        properties:
                          name:
                            type: string
                            description: |
                              Name of the script. Must be unique across this SGCluster.
                          database:
                            type: string
                            description: |
                              Database where the script is executed. Defaults to the `postgres` database, if not specified.
                          script:
                            type: string
                            description: |
                              Raw SQL script to execute. This field is mutually exclusive with `scriptFrom` field.
                          scriptFrom:
                            type: object
                            description: |
                              Reference to either a Kubernetes [Secret](https://kubernetes.io/docs/concepts/configuration/secret/) or a [ConfigMap](https://kubernetes.io/docs/concepts/configuration/configmap/) that contains the SQL script to execute. This field is mutually exclusive with `script` field.

                              Fields `secretKeyRef` and `configMapKeyRef` are mutually exclusive, and one of them is required.
                            properties:
                              secretKeyRef:
                                type: object
                                description: |
                                  A Kubernetes [SecretKeySelector](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#secretkeyselector-v1-core) that contains the SQL script to execute. This field is mutually exclusive with `configMapKeyRef` field.
                                properties:
                                  name:
                                    type: string
                                    description: Name of the referent. [More information](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
                                  key:
                                    type: string
                                    description: The key of the secret to select from. Must be a valid secret key.
                              configMapKeyRef:
                                type: object
                                description: |
                                  A [ConfigMap](https://kubernetes.io/docs/concepts/configuration/configmap/) reference that contains the SQL script to execute. This field is mutually exclusive with `secretKeyRef` field.
                                properties:
                                  name:
                                    type: string
                                    description: |
                                      The name of the ConfigMap that contains the SQL script to execute.
                                  key:
                                    type: string
                                    description: |
                                      The key name within the ConfigMap that contains the SQL script to execute.
                prometheusAutobind:
                  type: boolean
                  description: |
                    If enabled, a ServiceMonitor is created for each Prometheus instance found in order to collect metrics.
                nonProductionOptions:
                  type: object
                  properties:
                    disableClusterPodAntiAffinity:
                      type: boolean
                      description: |
                        It is a best practice, on non-containerized environments, when running production workloads, to run each database server on a different server (virtual or physical), i.e., not to co-locate more than one database server per host.

                        The same best practice applies to databases on containers. By default, StackGres will not allow to run more than one StackGres pod on a given Kubernetes node. Set this property to true to allow more than one StackGres pod per node.
                distributedLogs:
                  type: object
                  description: StackGres features a functionality for all pods to send Postgres, Patroni and PgBouncer logs to a central (distributed) location, which is in turn another Postgres database. Logs can then be accessed via SQL interface or from the web UI. This section controls whether to enable this feature or not. If not enabled, logs are send to the pod's standard output.
                  properties:
                    sgDistributedLogs:
                      type: string
                      description: |
                        Name of the [SGDistributedLogs](https://stackgres.io/doc/latest/04-postgres-cluster-management/06-distributed-logs/) to use for this cluster. It must exist.
                    retention:
                      type: string
                      pattern: '^[0-9]+ (minutes?|hours?|days?|months?)'
                      description: |
                        Define a retention window with the syntax `<integer> (minutes|hours|days|months)` in which log entries are kept.
                         Log entries will be removed when they get older more than the double of the specified retention window.

                        When this field is changed the retention will be applied only to log entries that are newer than the end of
                         the retention window previously specified. If no retention window was previously specified it is considered
                         to be of 7 days. This means that if previous retention window is of `7 days` new retention configuration will
                         apply after UTC timestamp calculated with: `SELECT date_trunc('days', now() at time zone 'UTC') - INTERVAL '7 days'`.
                postgresExtensions:
                  type: array
                  description: |
                    StackGres support deploy of extensions at runtime by simply adding an entry to this array. A deployed extension still
                    requires the creation in a database using the [`CREATE EXTENSION`](https://www.postgresql.org/docs/current/sql-createextension.html)
                    statement. After an extension is deployed correctly it will be present until removed and the cluster restarted.
                    
                    A cluster restart is required for:
                    * Extensions that requires to add an entry to [`shared_preload_libraries`](https://postgresqlco.nf/en/doc/param/shared_preload_libraries/) configuration parameter.
                    * Upgrading extensions that overwrite any file that is not the extension''s control file or extension''s script file.
                    * Removing extensions. Until the cluster is not restarted a removed extension will still be available.
                    * Install of extensions that require extra mount. After installed the cluster will require to be restarted.
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: The name of the extension to deploy.
                      publisher:
                        type: string
                        description: The id of the publisher of the extension to deploy. If not specified `com.ongres` will be used by default.
                      version:
                        type: string
                        description: The version of the extension to deploy. If not specified version of `stable` channel will be used by default.
                      repository:
                        type: string
                        description: The repository base URL from where to obtain the extension to deploy. If not specified https://stackgres.io/downloads/postgres/extensions will be used by default (or the value specified during operator deployment).
                    required: ["name"]
              required: ["instances", "postgresVersion", "pods"]
            status:
              type: object
              properties:
                conditions:
                  type: array
                  items:
                    type: object
                    properties:
                      lastTransitionTime:
                        description: Last time the condition transitioned from one status to another.
                        type: string
                      message:
                        description: A human readable message indicating details about the transition.
                        type: string
                      reason:
                        description: The reason for the condition's last transition.
                        type: string
                      status:
                        description: Status of the condition, one of True, False, Unknown.
                        type: string
                      type:
                        description: Type of deployment condition.
                        type: string
                toInstallPostgresExtensions:
                  type: array
                  description: The list of Postgres extensions to install.
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: The name of the extension to install.
                      publisher:
                        type: string
                        description: The id of the publisher of the extension to install.
                      version:
                        type: string
                        description: The version of the extension to install.
                      repository:
                        type: string
                        description: The repository base URL from where the extension will be installed from.
                      postgresVersion:
                        type: string
                        description: The postgres major version of the extension to install.
                      build:
                        type: string
                        description: The build version of the extension to install.
                      extraMounts:
                        type: array
                        description: The extra mounts of the extension to install.
                        items:
                          type: string
                          description: The extra mount of the installed extension.
                    required: ["name", "publisher", "version", "repository", "postgresVersion"]
                podStatuses:
                  type: array
                  description: The list of pod statuses.
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: The name of the pod.
                      pendingRestart:
                        type: boolean
                        description: Indicate if the pod requires restart
                      installedPostgresExtensions:
                        type: array
                        description: The list of Postgres extensions currently installed.
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              description: The name of the installed extension.
                            publisher:
                              type: string
                              description: The id of the publisher of the installed extension.
                            version:
                              type: string
                              description: The version of the installed extension.
                            repository:
                              type: string
                              description: The repository base URL from where the extension was installed from.
                            postgresVersion:
                              type: string
                              description: The postgres major version of the installed extension.
                            build:
                              type: string
                              description: The build version of the installed extension.
                            extraMounts:
                              type: array
                              description: The extra mounts of the installed extension.
                              items:
                                type: string
                                description: The extra mount of the installed extension.
                          required: ["name", "publisher", "version", "repository", "postgresVersion"]
                    required: ["name"]
                dbOps:
                  type: object
                  description: |
                    Used by some [SGDbOps](https://stackgres.io/doc/latest/reference/crd/sgdbops) to indicate the operation configuration and status to the operator.
                  properties:
                    majorVersionUpgrade:
                      type: object
                      description: |
                        The major version upgrade configuration and status
                      properties:
                        initialInstances:
                          type: array
                          description: |
                            The instances that this operation is targetting
                          items:
                            type: string
                        primaryInstance:
                          type: string
                          description: |
                            The primary instance that this operation is targetting
                        sourcePostgresVersion:
                          type: string
                          description: |
                            The source PostgreSQL version
                        targetPostgresVersion:
                          type: string
                          description: |
                            The target PostgreSQL version
                        locale:
                          type: string
                          description: |
                            The PostgreSQL locale
                        encoding:
                          type: string
                          description: |
                            The PostgreSQL encoding
                        dataChecksum:
                          type: boolean
                          description: |
                            Indicate if PostgreSQL data checksum is enabled
                        link:
                          type: boolean
                          description: |
                            Use `--link` option when running `pg_upgrade`
                        clone:
                          type: boolean
                          description: |
                            Use `--clone` option when running `pg_upgrade`
                        check:
                          type: boolean
                          description: |
                            Run `pg_upgrade` with check option before performing the real upgrade
                    restart:
                      type: object
                      description: |
                        The minor version upgrade configuration and status
                      properties:
                        initialInstances:
                          type: array
                          description: |
                            The instances that this operation is targetting
                          items:
                            type: string
                        primaryInstance:
                          type: string
                          description: |
                            The primary instance that this operation is targetting
                    minorVersionUpgrade:
                      type: object
                      description: |
                        The minor version upgrade configuration and status
                      properties:
                        initialInstances:
                          type: array
                          description: |
                            The instances that this operation is targetting
                          items:
                            type: string
                        primaryInstance:
                          type: string
                          description: |
                            The primary instance that this operation is targetting
                        sourcePostgresVersion:
                          type: string
                          description: |
                            Postgres version that is currently running on the cluster
                        targetPostgresVersion:
                          type: string
                          description: |
                            The desired Postgres version for the cluster
                    securityUpgrade:
                      type: object
                      description: |
                        The minor version upgrade configuration and status
                      properties:
                        initialInstances:
                          type: array
                          description: |
                            The instances that this operation is targetting
                          items:
                            type: string
                        primaryInstance:
                          type: string
                          description: |
                            The primary instance that this operation is targetting
      subresources:
        status: { }
