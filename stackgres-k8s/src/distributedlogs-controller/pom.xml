<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2019 OnGres, Inc.
  ~ SPDX-License-Identifier: AGPL-3.0-or-later
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>io.stackgres</groupId>
    <artifactId>stackgres-parent</artifactId>
    <version>1.0.0-beta3-SNAPSHOT</version>
  </parent>

  <artifactId>stackgres-distributedlogs-controller</artifactId>
  <packaging>jar</packaging>
  <name>StackGres Distributed Logs Local Controller</name>

  <properties>
    <checks.location>${project.parent.basedir}/checks</checks.location>
  </properties>

  <dependencies>
    <dependency>
      <groupId>io.stackgres</groupId>
      <artifactId>stackgres-common</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-properties</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-smallrye-health</artifactId>
    </dependency>
    <dependency>
      <groupId>com.ongres</groupId>
      <artifactId>fluent-process</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-jdbc-postgresql</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-rest-client</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.microprofile.config</groupId>
      <artifactId>microprofile-config-api</artifactId>
    </dependency>

    <dependency>
      <groupId>io.stackgres</groupId>
      <artifactId>stackgres-test-util</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-junit5</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-junit5-mockito</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.ongres</groupId>
      <artifactId>docker-junit-extension</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.inject</groupId>
      <artifactId>jersey-hk2</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.connectors</groupId>
      <artifactId>jersey-apache-connector</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <version>${log4j.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>stackgres-distributedlogs-controller</finalName>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>true</filtering>
      </testResource>
    </testResources>
    <plugins>
      <plugin>
        <groupId>org.jboss.jandex</groupId>
        <artifactId>jandex-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>io.quarkus</groupId>
        <artifactId>quarkus-maven-plugin</artifactId>
        <version>${quarkus.version}</version>
        <extensions>true</extensions>
        <configuration>
          <skip>false</skip>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>build</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>native</id>
      <activation>
        <property>
          <name>native</name>
        </property>
      </activation>
      <properties>
        <quarkus.package.type>native</quarkus.package.type>
      </properties>
    </profile>
    <profile>
      <id>build-image-jvm</id>
      <properties>
        <docker.removeVolumes>true</docker.removeVolumes>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker-maven-plugin.version}</version>
            <executions>
              <execution>
                <id>build-image</id>
                <phase>package</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>build</goal>
                  <goal>start</goal>
                  <goal>stop</goal>
                </goals>
                <configuration>
                  <containerNamePattern>%a</containerNamePattern>
                  <images>
                    <image>
                      <alias>ongres-jvm-builder</alias>
                      <name>ongres-jvm-builder</name>
                      <build>
                        <cleanup>remove</cleanup>
                        <from>${docker.image}</from>
                        <assembly>
                          <targetDir>/distributedlogs-controller</targetDir>
                          <inline>
                            <fileSets>
                              <fileSet>
                                <directory>${project.basedir}</directory>
                                <outputDirectory>/</outputDirectory>
                                <excludes>
                                  <exclude>target/docker/**</exclude>
                                </excludes>
                              </fileSet>
                            </fileSets>
                          </inline>
                        </assembly>
                      </build>
                      <run>
                        <privileged>true</privileged>
                        <workingDir>/</workingDir>
                        <entrypoint>
                          <arg>/bin/sh</arg>
                          <arg>-ex</arg>
                          <arg>/distributedlogs-controller/src/main/docker/build-image-jvm.sh</arg>
                        </entrypoint>
                        <wait>
                          <time>300000</time>
                          <exit>0</exit>
                        </wait>
                        <log>
                          <prefix>image-builder|</prefix>
                          <date>default</date>
                        </log>
                        <env>
                          <DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME>${env.DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME}</DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME>
                          <DOCKER_HOST>${env.DOCKER_HOST}</DOCKER_HOST>
                        </env>
                        <volumes>
                          <bind>
                            <volume>/var/lib/containers</volume>
                            <volume>/var/run/docker.sock:/var/run/docker.sock</volume>
                          </bind>
                        </volumes>
                      </run>
                    </image>
                  </images>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>build-image-native</id>
      <properties>
        <docker.removeVolumes>true</docker.removeVolumes>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker-maven-plugin.version}</version>
            <executions>
              <execution>
                <id>build-image</id>
                <phase>package</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>build</goal>
                  <goal>start</goal>
                  <goal>stop</goal>
                </goals>
                <configuration>
                  <containerNamePattern>%a</containerNamePattern>
                  <images>
                    <image>
                      <alias>distributedlogs-controller-native-builder</alias>
                      <name>distributedlogs-controller-native-builder</name>
                      <build>
                        <cleanup>remove</cleanup>
                        <from>${docker.image}</from>
                        <assembly>
                          <targetDir>/distributedlogs-controller</targetDir>
                          <inline>
                            <fileSets>
                              <fileSet>
                                <directory>${project.basedir}</directory>
                                <outputDirectory>/</outputDirectory>
                                <excludes>
                                  <exclude>target/docker/**</exclude>
                                </excludes>
                              </fileSet>
                            </fileSets>
                          </inline>
                        </assembly>
                      </build>
                      <run>
                        <privileged>true</privileged>
                        <workingDir>/</workingDir>
                        <entrypoint>
                          <arg>/bin/sh</arg>
                          <arg>-ex</arg>
                          <arg>/distributedlogs-controller/src/main/docker/build-image-native.sh</arg>
                        </entrypoint>
                        <wait>
                          <time>600000</time>
                          <exit>0</exit>
                        </wait>
                        <log>
                          <prefix>image-builder|</prefix>
                          <date>default</date>
                        </log>
                        <env>
                          <DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME>${env.DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME}</DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME>
                          <DOCKER_HOST>${env.DOCKER_HOST}</DOCKER_HOST>
                        </env>
                        <volumes>
                          <bind>
                            <volume>/var/lib/containers</volume>
                            <volume>/var/run/docker.sock:/var/run/docker.sock</volume>
                          </bind>
                        </volumes>
                      </run>
                    </image>
                  </images>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>kind-load-image-jvm</id>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker-maven-plugin.version}</version>
            <executions>
              <execution>
                <id>kind-load-image</id>
                <phase>package</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>start</goal>
                  <goal>stop</goal>
                </goals>
                <configuration>
                  <containerNamePattern>%a</containerNamePattern>
                  <images>
                    <image>
                      <alias>kind-load</alias>
                      <name>${ci.image}</name>
                      <run>
                        <entrypoint>
                          <arg>/bin/sh</arg>
                          <arg>-exc</arg>
                          <arg>
                            DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME="${DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME:-"stackgres/distributedlogs-controller:development-jvm"}"
                            CONTAINER_NAME="$(docker inspect -f '{{.Name}}' "$(hostname)"|cut -d '/' -f 2|sed 's/^kind-load/kind/')"
                            kind load docker-image --name "$CONTAINER_NAME" "$DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME" || true
                          </arg>
                        </entrypoint>
                        <wait>
                          <time>300000</time>
                          <exit>0</exit>
                        </wait>
                        <log>
                          <prefix>kind-load|</prefix>
                          <date>default</date>
                        </log>
                        <env>
                          <DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME>${env.DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME}</DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME>
                          <DOCKER_HOST>${env.DOCKER_HOST}</DOCKER_HOST>
                        </env>
                        <volumes>
                          <bind>
                            <volume>/var/run/docker.sock:/var/run/docker.sock</volume>
                            <volume>/var/lib/docker:/var/lib/docker:ro</volume>
                          </bind>
                        </volumes>
                      </run>
                    </image>
                  </images>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>kind-load-image-native</id>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker-maven-plugin.version}</version>
            <executions>
              <execution>
                <id>kind-load-image</id>
                <phase>package</phase>
                <goals>
                  <goal>stop</goal>
                  <goal>start</goal>
                  <goal>stop</goal>
                </goals>
                <configuration>
                  <containerNamePattern>%a</containerNamePattern>
                  <images>
                    <image>
                      <alias>kind-load</alias>
                      <name>${ci.image}</name>
                      <run>
                        <entrypoint>
                          <arg>/bin/sh</arg>
                          <arg>-exc</arg>
                          <arg>
                            DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME="${DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME:-"stackgres/distributedlogs-controller:development"}"
                            CONTAINER_NAME="$(docker inspect -f '{{.Name}}' "$(hostname)"|cut -d '/' -f 2|sed 's/^kind-load/kind/')"
                            kind load docker-image --name "$CONTAINER_NAME" "$DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME" || true
                          </arg>
                        </entrypoint>
                        <wait>
                          <time>300000</time>
                          <exit>0</exit>
                        </wait>
                        <log>
                          <prefix>kind-load|</prefix>
                          <date>default</date>
                        </log>
                        <env>
                          <DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME>${env.DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME}</DISTRIBUTEDLOGS_CONTROLLER_IMAGE_NAME>
                          <DOCKER_HOST>${env.DOCKER_HOST}</DOCKER_HOST>
                        </env>
                        <volumes>
                          <bind>
                            <volume>/var/run/docker.sock:/var/run/docker.sock</volume>
                            <volume>/var/lib/docker:/var/lib/docker:ro</volume>
                          </bind>
                        </volumes>
                      </run>
                    </image>
                  </images>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
